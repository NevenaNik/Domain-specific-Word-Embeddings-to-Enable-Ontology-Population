Hybrid Electric Vehicles

Hybrid vehicles are so deﬁned because their propulsion systems are equipped with
two energy sources, complementing each other: a high-capacity storage (typically a
chemical fuel in liquid or gaseous form), and a lower capacity rechargeable energy
storage system (RESS) that can serve as an energy storage buffer, but also as a means
for recovering vehicle kinetic energy or to provide power assist. The RESS can be
electrochemical (batteries or supercapacitors), hydraulic/pneumatic (accumulators)
or mechanical (ﬂywheel) [1]. This dual energy storage capability, in which the RESS
permits bi-directional power ﬂows, requires that at least two energy converters be
present, at least one of which must also have the ability to allow for bi-directional
power ﬂows. Hybrid electric vehicles (HEVs), which represent the majority of hybrid
vehicles on the road today, use electrochemical batteries as the RESS, and electric
machines (one or more) as secondary energy converters, while a reciprocating internal
combustion engine (ICE), fueled by a hydrocarbon fuel, serves as the primary energy
converter. A fuel cell or other types of combustion engine (gas turbine, external
combustion engines) could also serve as the primary energy converter.

The RESS can be used for regenerative braking and also acts as an energy buffer
for the primary energy converter, e.g., an ICE, which can instantaneously deliver an
amount of power different than what is required by the vehicle load. This ﬂexibility
in engine management results in the ability to operate the engine more often in
conditions where it is more efﬁcient or less polluting [2, 3]. Other beneﬁts offered
by hybridization are the possibility to shut down the engine when it is not needed (such
as at a stop or at low speed), and the downsizing of the engine: since the peak power
can be reached by summing the output from the engine and from the RESS, the former
can be downsized, i.e. replaced with a smaller and less powerful engine, operating
at higher average efﬁciency. Plug-in hybrid electric vehicles (PHEVs) allow battery
recharge from the electric grid and offer a signiﬁcant range in pure electric mode.
The details of what can actually be accomplished depend on the architecture of the
propulsion system and of the vehicle powertrain, as described in the next section.

The powertrain of a conventional vehicle is composed by an internal combustion
engine, driving the wheels through a transmission that realizes a variable speed ratio
between the engine speed and the wheel speed. A dry clutch or hydrodynamic torque
converter interposed between engine and transmission decouples the engine from the
wheels when needed, i.e., during the transients in which the transmission speed ratio
is being modiﬁed. All the torque propelling the vehicle is produced by the engine
or the mechanical brakes, and there is a univocal relation between the torque at the
wheels and the torque developed by the engine (positive) or the brakes (negative).

Hybrid electric vehicles, on the other hand, include one or more electric machines
coupled to the engine and/or the wheels [4]. A possible classiﬁcation of today’s
vehicles in the market can be given based on internal combustion engine size and
electric machine size as shown in Fig. 1.1 [5] and detailed in the following:

1. Conventional ICE vehicles;
2. Micro hybrids (start/stop);
3. Mild hybrids (start/stop + kinetic energy recovery + engine assist);
4. Full hybrids (mild hybrid capabilities + electric launch);
5. Plug-in hybrids (full hybrid capabilities + electric range);
6. Electric Vehicles (battery or fuel cell).

Differences and main characteristics of the different types of vehicles are outlined

below [2, 6–8].

1. Conventional Vehicle
(ICE only)

2. Micro Hybrids
(start/stop)

 
l
a
n
r
e
t
n
I
 
f
o
 
e
z
i
S

e
n
i
g
n
E
 
n
o
i
t
s
u
b
m
o
C

3. Mild Hybrids
(start/stop + kinetic energy recovery)

4. Full Hybrids
(mild hybrid + electric launch + engine assist)

5. Plug-in Hybrids
(full hybrid + electric range)

6. Electric vehicles
(battery or fuel cell)

Size of Electric Motor 
and Battery

Fig. 1.1 Spectrum of vehicle technologies [5]: pathway of increasing electriﬁcation starting with
ICE only—powered vehicles, going through different means of vehicle hybridization and ending
up with pure electric vehicles powered by batteries or hydrogen fuel cell

1.2 HEV Architectures

3

1. In conventional vehicles the ICE is the only source of power. For this type of
vehicles the total power request at the wheel is entirely satisﬁed by the ICE.
2. Start–stop systems allow the ICE to shut down and restart to reduce the amount of
time spent idling, thus reducing fuel consumption and emissions. This solution is
very advantageous for vehicles which spend signiﬁcant amounts of time waiting
at trafﬁc lights or frequently come to a stop in trafﬁc. This feature is present in
hybrid electric vehicles, but has also appeared in vehicles which lack a hybrid
electric powertrain. Nonelectric vehicles featuring start–stop systems are called
micro hybrids.

3. In mild hybrid vehicles generally the ICE is coupled with an electric machine (one
motor/generator in a parallel conﬁguration) allowing the engine to be turned off
whenever the car is coasting, braking, or stopping. Mild hybrids can also employ
regenerative breaking and some level of ICE power assist, but do not have an
exclusive electric-only mode of propulsion.

4. Full hybrid electric vehicles run on just the engine, just the battery, or a combi-
nation of both. A high-capacity battery pack is needed for battery-only operation
during the electric launch. Differently from micro and mild hybrids, where simple
heuristic rules are typically used to coordinate the ICE start–stop and power assist
functionality, in full hybrid vehicles energy management strategies are needed
to fully exploit the beneﬁts of vehicle hybridization, by providing coordination
among the actuators in order to minimize fuel consumption.

5. Plug-in hybrid electric vehicles are hybrid vehicles utilizing rechargeable batteries
that can be restored to full charge by connecting them to an external electric power
source. PHEVs share the characteristics of both full hybrid electric vehicles,
having electric motor and an ICE, and of all-electric vehicles, having a plug to
connect to the electrical grid.

6. Electric vehicles are propelled only by their on-board electric motor(s), which
are powered by a battery (recharged from the power grid) or a hydrogen fuel cell.

In this book, we focus on full hybrid electric vehicles. The number and position of
the machines present in full hybrid vehicles deﬁne the powertrain architecture, and
therefore the performance and capabilities of the hybrid vehicles themselves. HEV
architectures can be classiﬁed as follows [8]:

(cid:129) series: the engine drives a generator, producing electrical power which can be
summed to the electrical power coming from the RESS and then transmitted, via
an electric bus, to the electric motor(s) driving the wheels;

(cid:129) parallel: the power summation is mechanical rather than electrical: the engine and
the electric machines (one or more) are connected with a gear set, a chain, or a
belt, so that their torque is summed and then transmitted to the wheels;

(cid:129) power split: the engine and two electric machines are connected to a power split
device (usually a planetary gear set), thus the power from the engine and the electric
machines can be merged through both a mechanical and an electrical path, thus
combining series and parallel operation;

4

1 Introduction

(cid:129) series/parallel: the engagement/disengagement of one or two clutches allows to
change the powertrain conﬁguration from series to parallel and vice versa, thus
allowing the use of the conﬁguration best suited to the current operating conditions.

The series architecture has the advantage of requiring only electrical connections
between the main power conversion devices. This simpliﬁes some aspects of vehicle
packaging and design. Also, having the engine completely disconnected from the
wheels gives great freedom in choosing its load and speed, thus making it possible
for the engine to operate at the highest possible efﬁciency. On the other hand, series
hybrids require two energy conversions (mechanical to electrical in the generator,
and electrical to mechanical in the motor), which introduce losses, even in cases
when a direct mechanical connection of the engine to the wheels would actually
be more efﬁcient, overall. For this reason, there are conditions in which a series
hybrid vehicle consumes more fuel than its conventional counterpart: for example,
in highway driving. Further, one of the two electromechanical energy converters
must be sized to support the maximum power requirements of the vehicle, since
it is the primary source of motive power. The parallel architecture does not have
this problem; however, unless signiﬁcantly oversized, the electric motors are less
powerful than those used in a series hybrid (because not all the mechanical power
ﬂows through them), thus reducing the potential for regenerative braking; also, the
engine operating conditions cannot be determined as freely as in a series hybrid
architecture, because the engine speed is mechanically related (via the transmission)
to the vehicle velocity. Power split and series/parallel architectures (which can be
realized in different ways) are the most ﬂexible, and give a higher degree of control
of the operating conditions of the engine than the parallel architecture while applying
the double energy conversion typical of series operation only to a fraction of the total
power ﬂow, thus reducing overall losses [3, 8].

1.3 Energy Analysis of Hybrid Electric Vehicles

Energy analysis is essential to understand why hybrid electric vehicles are beneﬁ-
cial from the efﬁciency point of view, and to appropriately design and assess energy
management strategies. Consider the case of a conventional vehicle: the combustion
engine, which converts the chemical energy in the fuel to mechanical energy, gen-
erates all the power needed during a trip. The mechanical power generated by the
engine is used for moving all driveline components, driving accessories (power steer-
ing, alternator, air conditioning …), and, of course, moving the vehicle. Given the
driver’s input (accelerator and brake pedals) and the driving conditions (speed, road
surface, etc.), the operating condition of the engine (speed and torque) is determined
by a single degree of freedom, i.e., the choice of the transmission gear ratio. The
power management strategy is the choice of this ratio. In hybrid electric vehicles,
instead, the total power demand is satisﬁed by summing together the outputs of the
engine (thermal path or fuel path) and of the battery or other storage devices (electric

1.3 Energy Analysis of Hybrid Electric Vehicles

5

path). The ratio of the power ﬂows generated by each path constitutes an additional
degree of freedom that permits optimization of the engine operating conditions to
achieve improvements in efﬁciency and fuel economy. In addition, the electric motors
are reversible and can produce negative torque. Thus, they can replace or supplement
the mechanical brakes as a means to decelerate the vehicle, with the beneﬁt of acting
like generators and producing electrical energy, which can be stored in batteries on
board of the vehicle for later use. This operation, known as regenerative braking,
may substantially improve the overall efﬁciency over an extended time period. The
additional freedom afforded by a hybrid architecture makes the use of a power man-
agement strategy necessary, both over a short time horizon, to recover braking energy
and to guarantee performance and instantaneous fuel economy, as well as over a long
time horizon, to guarantee that the RESS has sufﬁcient energy in store when needed,
and that fuel economy beneﬁts are achieved. Hence, the need for an energy man-
agement strategy arises, which extends the power management (instantaneous) with
considerations based on a longer time horizon, keeping into account the amount of
energy stored in the vehicle.

The energy management strategy determines at each instant the power reparti-
tion between the engine and the RESS, according to instantaneous constraints (e.g.,
generating the total power output requested by the driver), global constraints
(e.g., maintaining the RESS energy level within safety limits) and global objectives
(e.g., minimizing the fuel consumption during a trip).

1.4 Book Structure

The objective of this book is to illustrate optimization-based methods to design a
high-level energy management strategy for hybrid electric vehicles, based on optimal
control theory tools. Chapter 2 provides an overview on control-oriented modeling
approaches and methods that can be used for energy management design and test-
ing; Chap. 3 deﬁnes the role of energy management system in the overall vehicle
control architecture and introduces the energy management problem in a rigorous
way. Chapter 4 presents the Dynamic Programming (DP) algorithm and Chap. 5
Pontryagin’s minimum principle (PMP), two optimal control methods, applied to
the HEV energy management problem to obtain the theoretical optimal solution, and
as such only applicable ofﬂine; in Chap. 5 the relation between the DP and PMP
solutions is presented. Chapter 6 describes the Equivalent Fuel Consumption Min-
imization Strategy (ECMS), and discusses its equivalence to the PMP solution. A
family of online causal suboptimal control strategies derived from PMP/ECMS is
introduced in Chap. 7. Here, adaptive methods to update the control parameter used in
the PMP/ECMS are discussed, which result into suboptimal real-time implementable
strategies. Finally, Chap. 8 presents two case studies to demonstrate with practical
examples the application of the modeling techniques and the implementation in sim-
ulation of optimal control strategies.
The objective of the energy management control is to minimize the vehicle fuel
consumption, while maintaining the battery state of charge around a desired value.
To this end, modeling for energy management may have two scopes: creating plant
simulators to which an energy management strategy is applied for testing and devel-
opment, or creating embedded models that are used to set up analytically and/or solve
numerically the energy management problem. Plant models tend to be more accurate
and computationally heavy than embedded control models. The main objective in
both cases is to reproduce the energy ﬂows within the powertrain and the vehicle,
in order to obtain an accurate estimation of fuel consumption and battery state of
charge, based on the control inputs and the road load. In some applications, other
quantities may be of interest, such as thermal ﬂows (temperature variation in engine,
batteries, after-treatment, etc.), battery aging, pollutant emissions, etc.

This chapter provides a concise overview of the modeling issues linked to the
development and simulation of energy management strategies. The reader is referred
to more specialized works for further details (e.g., [1]). Efﬁciency considerations are
at the basis of the models described, which are suited for preliminary analysis and
high-level energy management development.

2.2 Modeling for Energy Analysis

Because of the losses in the powertrain, the net amount of energy produced at the
wheels is smaller than the amount of energy introduced into the vehicle from external
sources (e.g., fuel). Conversion losses take place when power is transformed into
a different form (e.g., chemical into mechanical, mechanical into electrical, etc.).
Similarly, when power ﬂows through a connection device, friction losses and other
inefﬁciencies reduce the amount of power at the device output. Energy losses in
powertrain components are usually modeled using efﬁciency maps, i.e., tables that
contain efﬁciency data as a function of the operating conditions (for example, the
output torque and the rotational speed of the engine). Maps are built experimentally
as a set of stationary points, i.e., letting the component reach a steady-state operating
condition and measuring power input and output (and/or power dissipation) in that
condition. Because of this procedure, efﬁciency maps may not be accurate during
transients. Despite this, the approach is widely used because it allows to generate
simple models capable of being evaluated quickly when implemented in computer
code, and validation results [2] show that the accuracy of such models can be very
good for estimating fuel consumption and energy balance, as most of the energy
content is associated with the slower system dynamics [3].

The vehicle fuel consumption for a prescribed driving cycle can be estimated using
a backward or a forward modeling approach. The backward, quasi-static approach
is based on the assumption that the prescribed driving cycle is followed exactly by
the vehicle. The driving cycle is subdivided in small time intervals, during which an
average operating point approach is applied, assuming that speed, torque, and accel-
eration remain constant: this is equivalent to neglecting internal powertrain dynamics
and taking average values of all variables during the selected sampling time, which
is therefore longer than typical powertrain transients (e.g., engine dynamics, gear
shifting), and of the same order of magnitude of vehicle longitudinal dynamics and
driving cycle variations. Each powertrain component is modeled using an efﬁciency
map, a power loss map, or a fuel consumption map: these give a relation between
the losses in the component and the present operating conditions (averaged during
the desired time interval).

The forward, dynamic approach is based on a ﬁrst-principles description of each
powertrain component, with dynamic equations describing the evolution of its state.
The degree of modeling detail depends on the timescale and the nature of the phe-
nomena that the model should predict. In the simplest case, the same level of detail
as the quasi-static approach can be applied, but the evolution of vehicle speed is
computed as the result of the dynamic simulation and not prescribed a priori.

2.3 Vehicle-Level Energy Analysis

By vehicle-level energy analysis, we refer to the case in which the vehicle is consid-
ered as a point mass and its interaction with the external environment is studied, in
order to compute the amount of power and energy needed to move it with speciﬁed
speed. This high-level approach is useful to develop an understanding of the vehicle
longitudinal dynamics and of the energy characteristics of hybrid vehicles.

2.3.1 Equations of Motion

If a vehicle is considered as a mass point, its motion equation can be written from
the equilibrium of forces shown in Fig. 2.1:

2.3 Vehicle-Level Energy Analysis

9

Fgrade

Mvehg

Finertia

Faero

Froll

Ftrac

δ

Fig. 2.1 Forces acting on a vehicle

Mveh

dvveh
dt

= Finertia = Ftrac − Froll − Faero − Fgrade,

(2.1)

where Mveh is the effective vehicle mass, vveh is the longitudinal vehicle velocity,
Finertia is the inertial force, Ftrac = Fpwt − Fbrake is the tractive force generated by the
powertrain and the brakes at the wheels,1 Froll is the rolling resistance (friction due
to tire deformation and losses), Faero the aerodynamic resistance, Fgrade the force due
to road slope.

The aerodynamic resistance is expressed as

Faero = 1
2

ρairAf Cdv2
veh

,

(2.2)

where ρair is the air density (1.25 kg/m3 in normal conditions), Af the vehicle frontal
area, Cd the aerodynamic drag coefﬁcient.

The rolling resistance force is usually modeled as [1]

Froll = croll(vveh, ptire, . . .)Mvehg cos δ,

(2.3)

where g is the gravity acceleration, δ the road slope angle (so that Mvehg cos δ is the
vertical component of the vehicle weight), and croll is a rolling resistance coefﬁcient
which is, in principle, a function of vehicle speed, tire pressure ptire, external temper-
ature, etc. In most cases, croll is assumed to be constant, or to be an afﬁne function
of the vehicle speed:

croll = cr0 + cr1vveh.

(2.4)

1This is the sum of the forces acting on the individual wheels. For each wheel, it represents the net
torque acting on the wheel divided by the effective tire radius. Note that the tire radius is assumed
here to be equal to the nominal tire radius, but it can be very different from this value during dynamic
transient maneuvers, which are not considered in this book. See a vehicle dynamics textbook for
more details on the modeling of ground/tire forces (see, e.g., [4]).

10

2 HEV Modeling

Compact car

Table 2.1 Typical values of vehicle-dependent parameters for longitudinal vehicle dynamics mod-
els
Parameter
Mveh
Cd
Af
croll

1200–1500 kg
0.3–0.35
1.3–1.7 m2
0.01–0.03

1700–2000 kg
0.28–0.33
1.8–2.2 m2
0.01–0.03

1900–2200 kg
0.32–0.38
2–2.5 m2
0.01–0.03

Full-size car

SUV

The order of magnitude of croll is 0.01–0.03 (for a light vehicle on normal road
surface), which means that the rolling resistance is 1–3 % of the vehicle weight
(depending on vehicle, soil, tires and tire pressure, temperature, etc.).

The grade force is the horizontal component of the vehicle weight, which opposes

(or facilitates) vehicle motion only if the vehicle is moving uphill (or downhill):

Fgrade = Mvehg sin δ.

(2.5)

These basic equations represent the starting point for vehicle modeling, and can
be sufﬁciently accurate if the parameters are correctly identiﬁed. Typical values of
the vehicle-level parameters are listed in Table 2.1.

2.3.2 Forward and Backward Modeling Approaches

Equation (2.1) can be rearranged to calculate the tractive force that the powertrain
needs to produce, given the acceleration (inertial force Finertia):

Ftrac = Fpwt − Fbrake = Finertia + Fgrade + Froll + Faero.

(2.6)

The different form of (2.1) and (2.6) corresponds to the forward and backward
modeling approaches: in (2.1), the vehicle acceleration dvveh
is computed as a conse-
dt
quence of the tractive force generated by the powertrain (and obviously the external
resistance terms), and the speed is then obtained by integration of the acceleration;
this is the forward approach, which reproduces the physical causality of the system.
On the other hand, in the backward approach modeled by (2.6), force follows veloc-
ity and the tractive force is calculated starting from the inertia force: in this case,
it is assumed that the vehicle is following a prescribed velocity (and acceleration)
proﬁle, and Ftrac represents the corresponding force that the powertrain must supply.

2.3 Vehicle-Level Energy Analysis

11

Speed 
setpoint

Driving 
cycle

Driver 
model

Vehicle Speed 

Torque setpoint

Torque 

Torque 

Force 

Engine

Drivetrain

Wheel

Vehicle 
dynamics

Speed 

Wheel
Speed 

Vehicle
Speed 

Fuel 
Consumption

Fig. 2.2 Information ﬂow in a forward simulator

The forward approach is the option typically chosen in most simulators; it is char-
acterized by the information ﬂow as shown in Fig. 2.2. For example, in the case of a
hybrid vehicle forward simulator, the desired speed (from the cycle inputs) is com-
pared to the actual vehicle speed, and braking or throttle commands are generated
using a driver model (e.g., a PID speed controller) in order to follow the imposed vehi-
cle proﬁle. This driver command is an input to the supervisor block that is responsible
of issuing the actuators setpoints (engine, electric machines, and braking torques)
to the rest of the powertrain components, which ultimately produce a tractive force.
Finally, the force is applied to the vehicle dynamics model, where the acceleration
is determined with (2.1), taking into account the road load information [5].

In a backward simulator, instead (see Fig. 2.3), no driver model is necessary,
since the desired speed is a direct input to the simulator, while the engine torque
and fuel consumption are outputs. The simulator determines the net tractive force to
be applied based on the velocity, payload, and grade proﬁles, along with the vehi-
cle characteristics. Based on this information, the torque that the powertrain should
apply is calculated, and then the torque/speed characteristics of the various power-
train components are taken into account in order to determine the engine operating
conditions and, ﬁnally, the fuel consumption.

Speed 
setpoint

Driving 
cycle

Vehicle 
dynamics

Force 

Torque 

Torque 

Wheel

Drivetrain

Engine

Vehicle
Speed 

Wheel
Speed 

Speed 

Fuel 
Consumption

Fig. 2.3 Information ﬂow in a backward simulator

12

2 HEV Modeling

Both the forward and backward simulation approaches have their relative strengths
and weaknesses. Fuel economy simulations are typically conducted over predeter-
mined driving cycles, and therefore using a backward simulator ensures that each
different simulation exactly follows this proﬁle, which guarantees consistency of
simulation results. By contrast, a forward simulator may not exactly follow the trace,
as it introduces a small error between the actual and the desired signal. Proper tuning
of the driver block can reduce the differences, whereas the backward version keeps
the error at zero without any effort. On the other hand, a backward simulation assumes
that the vehicle and powertrain are capable of following the speed trace, and does not
account for limitations of the powertrain actuators in computing the vehicle speed,
which is predetermined. This poses the problem of evaluating demanding cycles
which may require more power than the powertrain can provide. A forward simula-
tion does not have this issue, because the speed is computed from the torque/force
output, which can be saturated according to the powertrain limitations. For this rea-
son, forward simulation can also be used for acceleration tests and in general for
testing the behavior of the system at saturation. In addition, forward simulators are
implemented according to physical causality and, if their level of detail is appro-
priate, can be used for development of online control strategies, while a backward
simulator is suited for preliminary screening of energy management strategies. It is
possible to combine the advantages of both modeling approaches, i.e., the accurate
reproduction of a cycle by a backward simulation and the ability to capture power-
train limitations of a forward simulator. A solution, represented in Fig. 2.4, consists
in using a forward simulator in which the driver model (speed controller) uses a
backward vehicle model to compute the torque setpoints to be applied: in this way,
the resulting speed proﬁle will match exactly the reference cycle, if this does not

Driver model

Drivetrain

Wheel

Force 

Speed 

Speed 
setpoint

Driving 
Cycle

Torque request
(feedback)

Vehicle Speed 

feedback

Torque request
(feedforward)

+

Torque 
setpoint

Torque 

Torque 

Force 

Engine

Drivetrain

Wheel

Vehicle 
dynamics

Speed 

Wheel
Speed 

Vehicle
Speed 

Fuel 
Consumption

Fig. 2.4 Information ﬂow in a backward–forward simulator

2.3 Vehicle-Level Energy Analysis

13

saturate the powertrain capacity, but will be appropriately saturated when needed
since it goes through a forward powertrain model. A feedback term should also be
added, in order to recover speed deviation due to powertrain saturation (or to possible
mismatches between the backward and forward models).

2.3.3 Vehicle Energy Balance

Fuel consumption evaluation is conducted by analyzing the energy ﬂows in the
powertrain and identifying the areas in which saving can be introduced. From (2.6)
the inertial force Finertia is positive when the vehicle is accelerating, and negative
during deceleration; the grade force Fgrade is positive when the vehicle is driven
uphill and negative when it is going downhill; the rolling (Froll) and aerodynamic
(Faero) resistances are always positive (for a vehicle moving in forward direction).

The forces Froll and Faero are dissipative, since they always oppose the motion of
the vehicle, while the inertial and grade forces are conservative, being only depen-
dent on the vehicle state (respectively velocity and altitude). Thus, part of the tractive
force generated by the powertrain increases the kinetic and potential energy of the
vehicle (by accelerating it and moving it uphill), and part is dissipated in rolling
and aerodynamic resistances. When the vehicle decelerates or drives downhill, its
potential and kinetic energy must be dissipated: rolling and aerodynamic resistances
contribute to dissipating part of the vehicle energy, but for faster deceleration the
mechanical brakes must be used. Thus, ultimately, all the energy that the powertrain
produces is dissipated in these three forms: rolling resistance, aerodynamic resis-
tance, and mechanical brakes. The net variation of kinetic energy is always zero
between two stops (since initial speed and ﬁnal speed are both zero), and the varia-
tion of potential energy only depends on the difference of altitude between the initial
and ending point of the trip considered.

Multiplying all terms of (2.6) by the vehicle speed (vveh) the following balance

of power is obtained:

Ptrac = Pinertia + Pgrade + Proll + Paero.

(2.7)

The term Ptrac represents the tractive power at the wheels, either positive or nega-
tive. Positive Ptrac is generated by the powertrain to propel the vehicle, while negative
Ptrac (corresponding to deceleration) can be obtained using the powertrain, the brakes
or both. In conventional vehicles, the amount of negative power that the powertrain
can absorb is rather limited: it consists in friction losses in the various components
and pumping losses in the engine. In hybrid electric vehicles, the amount of negative
power is much higher, since the electric traction machines are reversible and can be
used for deceleration as well as acceleration.

The term Pinertia = Mveh ˙vvehvveh represents the amount of power needed just to
accelerate the vehicle (without considering the losses); the terms Proll = Frollvveh
and Paero = Faerovveh are the amount of power needed to overcome the rolling and

14

2 HEV Modeling

aerodynamic resistances respectively; and Pgrade = Fgradevveh is the power that goes
into overcoming a slope (or, if the slope is negative and the vehicle is going downhill,
it is the power that accelerates the vehicle and, when excessive, must be dissipated
to prevent undesired acceleration).

If the terms that appear in (2.7) are integrated over the duration of a trip (time

interval [t0 tf ]), the following energy balance is obtained:

Etrac =

Ptracdt = Ekin + Epot + Eroll + Eaero,

(2.8)

where the individual terms are:

(cid:2)

tf

t0
(cid:2)

tf

t0
tf

t0

Ekin =

Pinertiadt = Mveh

vveh(t)˙vveh(t)dt;

Epot =

Pgradedt = Mvehg
(cid:2)

Eroll =

Prolldt = Mvehg

vveh(t) sin δ(t)dt;

crollvveh(t) cos δ(t)dt;
(cid:2)

Eaero =

Paerodt = 1
2

ρairAf Cd

vveh(t)3dt.

tf

t0

(2.9a)

(2.9b)

(2.9c)

(2.9d)

(cid:2)

tf

t0

tf

tf

tf

tf

(cid:2)

t0

(cid:2)

t0

(cid:2)

t0

(cid:2)

t0

Note that the integral of the inertial power Pinertia is the variation of kinetic energy
Ekin, and the integral of the grade power Pgrade is the variation of potential energy
Epot. Each energy term is the product of two terms: one representing vehicle para-
meters (mass, resistance coefﬁcients), which are independent of the driving cycle,
and the other representing driving cycle information, independent of the vehicle
characteristics and only function of the velocity proﬁle2 vveh(t).

The relative amount of rolling resistance, aerodynamic resistance, and brake
energy deﬁnes the characteristics of a driving cycle. In particular, the potential for
energy recovery using regenerative braking is equal to the amount of kinetic and
potential energy that needs to be dissipated, minus the quantity that is dissipated
because of rolling and aerodynamic resistance. Thus, a urban driving cycle with fre-
quent accelerations and decelerations at low speed (where the resistances are lower)
presents more potential for energy recovery than a highway cycle in which the speed
is approximately constant and the losses due to aerodynamic resistance represent the
major component of the power requested by the vehicle.

To better understand this concept, it is useful to look separately at the energy
balance during acceleration (˙vveh ≥ 0) and deceleration (˙vveh < 0), i.e., compute the
integrals above by summing over different sections of the driving cycle. Let us
denote with the superscript + the energy values computed by considering only the
instants in which ˙vveh ≥ 0, and with the superscript − those relative to the instants in

2An exception is the rolling resistance contribution Eroll, because the coefﬁcient croll may, in general,
depend on vehicle speed as well as vehicle and tire characteristics.

2.3 Vehicle-Level Energy Analysis

which ˙vveh < 0 (i.e., the integrals (2.9a, 2.9b, 2.9c, 2.9d) are split into two domains,
according to the sign of ˙vveh).

The kinetic energy in the two cases is equal, but with opposite sign:

15

(2.10)

E−
kin

= −E+
kin

because the net variation of kinetic energy is zero during the entire cycle, and its
variation is positive each time ˙vveh > 0, and negative each time that ˙vveh < 0.

The amount of energy that the powertrain must deliver during acceleration is thus:

E+
pwt

= E+
roll

+ E+
aero

+ E+
pot

+ E+
kin

,

(2.11)

that is, the energy provided by the powertrain is spent to: accelerate the vehicle
(increase its kinetic energy by E+
pot); and overcome
dissipative resistances (E+
aero). However, in the course of a complete trip
(vehicle starting from standstill and coming to a stop at the end), the net variation
of kinetic energy is zero. Therefore, the same amount of kinetic energy produced
during acceleration (E+

kin) must be removed from the vehicle during deceleration.

kin); move it at a higher level (E+

roll and E+

When the vehicle decelerates, it needs to dissipate the entire amount of kinetic
energy accumulated during acceleration. The dissipative resistances contribute to
this, since they tend to slow down the vehicle. However, the amount of kinetic
energy to dissipate during deceleration may be higher than the sum of rolling and
aerodynamic resistance; in this case, the vehicle must be decelerated using additional
actuators, for example using mechanical brakes or, in a hybrid vehicle, producing
negative torque with electric traction motors, thus recuperating (some of) the energy.
The amount of energy available for regeneration, Eregen,pot, is the total vehicle energy
cumulated during acceleration (kinetic and potential) minus the losses during the
deceleration phase, given by dissipative losses (rolling resistance and aerodynamic
drag) and by the increase of potential energy (E−

pot)3:

Eregen,pot = E+

kin

+ E+
pot

− E−
roll

− E−
aero

− E−
pot

(2.12)

The diagram in Fig. 2.5 shows graphically this concept: proceeding from left to

right, losses are subtracted to compute the energy available at each stage.

2.3.4 Driving Cycles

As implied in the previous section, the advantages of hybrid vehicles depend on how
the vehicle is used. In particular, the hybridization advantages consist essentially in

3In other words, if the vehicle is decelerating uphill, part of its kinetic energy is lost to overcome
the gravity; downhill, on the other hand, the gravitational force will increase the amount of energy
to be regenerated.

16

2 HEV Modeling

vehicle losses (acceleration phase)
E+
roll

+ E+

aero

vehicle losses (deceleration phase)
+ E−
E−
pot
roll

+ E−

aero

powertrain output

kinetic energy available for regeneration
− E−
+ E+
Eregen,pot = E+
pot
kin

− E−
roll

aero

− E−
pot

total kinetic and 
potential energy
+ E+
pot

E+
kin

Fig. 2.5 Vehicle energy balance (bar length represents energy)

recovering potential and kinetic energy that would otherwise be dissipated in the
brakes, and in operating the engine in its highest-efﬁciency region. If the engine had
a constant efﬁciency and the vehicle drove at constant speed on a ﬂat road, there
would be no advantage in a hybrid electric conﬁguration.

A driving cycle represents both the way the vehicle is driven during a trip and the
road characteristics. In the simplest case, it is deﬁned as a time history of vehicle speed
(and therefore acceleration) and road grade. Together with the vehicle characteristics,
this completely deﬁnes the road load, i.e., the force that the vehicle needs to exchange
with the road during the driving cycle.

As pointed out in Sect. 2.3.3, each term in the energy balance is a function of
both the driving cycle (speed, acceleration, grade) and the vehicle (mass, frontal
area, coefﬁcients of aerodynamic and rolling resistance). For this reason, the fuel
consumption of a vehicle must always be speciﬁed in reference to a speciﬁc driving
cycle. On the other hand, given a driving cycle, the absolute value of the road load and
also the relative magnitude of its components depend on the vehicle characteristics.
The necessity for a standard method to evaluate emissions and fuel consumption
of all vehicles on the market, and to provide a reliable basis for their comparison,
led to the introduction of a reduced number of regulatory driving cycles: any vehicle
sold must be tested, according to detailed procedures, using one or more of these
standard cycles, which are different for each world region.

Examples of standard cycles are shown in Fig. 2.6, which also include a basic

energy analysis comparison.

These driving cycles are designed to be representative of urban and extra-urban
driving conditions. The Japan 10–15 and European cycle (NEDC) are synthetic,

150

100

50

0

150

100

50

0

150

100

50

0

150

100

50

150

100

50

0

150

100

50

0

150

100

50

0

150

100

50

h
/
m
k

h
/
m
k

h
/
m
k

h
/
m
k

2.3 Vehicle-Level Energy Analysis

17

Artemis extra urban

Artemis highway

Artemis urban

FHDS

FUDS

Japan 10 15

NEDC

US 06

Aero

Roll

Kin
Regen pot.

0

0

4

8

12
16
Time [min]

20

24

8

16
12
Time [min]

20

24

0

0

4

Fig. 2.6 Some examples of standard driving cycles. The pie chart shows the relative amount of
+
the energy terms E
roll, as well as the amount of kinetic energy that can be recovered
+
according to (2.12). The pie surface is proportional to the total cycle energy E
pwt deﬁned by (2.11).
Energies are computed with the vehicle data of Table 8.1

kin, E+

aero, E

+

while the others reproduce measures of vehicle speed in actual roads. However, with
the exception of US 06, the acceleration levels are well below the capabilities of
any modern car, therefore the fuel consumption results are typically optimistic and
unable to reproduce real-world driving conditions.

The regulatory cycles should be considered a standard comparison tool and not as
representative of actual operating conditions. In fact, it is not possible to predict how
a vehicle will be driven, since each vehicle has a different usage pattern and each

18

2 HEV Modeling

driver his or her own driving style. In order to obtain more realistic estimations
of real-world fuel consumption for a speciﬁc vehicle, vehicle manufacturers may
develop their own testing cycles.

2.4 Powertrain Components

This section contains a description of models of the principal powertrain components
suitable for energy ﬂow modeling, neglecting component dynamics. Detailed behav-
ioral models accurately accounting for dynamic effect are beyond the objectives of
this book and can be found in specialized works.

2.4.1 Internal Combustion Engine

The following modeling approaches can be used for an internal combustion engine,
in order of increasing complexity:

1. Static map;
2. Static map and lumped-parameter dynamic model;
3. Mean-value model;
4. One-dimensional ﬂuid-dynamic model;
5. Three-dimensional ﬂuid-dynamic model (ﬁnite-element).

The latter two approaches are necessary only for detailed studies focused on the
engine subsystem, while the ﬁrst three methods can be useful in models in which
the engine is seen as part of a more comprehensive system (powertrain or vehicle)
and as such can be employed in energy management simulators (map models) or
powertrain control strategies (map with lumped-parameter dynamics or mean-value
models).

The static map approach assumes the engine to be a perfect actuator, which
responds immediately to the commands; the fuel consumption is computed using a
map (table) as a function of the engine speed and torque, both of which are assumed
to be known. In particular, the torque is typically a control input for the engine, while
the speed is a measured input and derives from the coupling to the rest of the pow-
ertrain. A curve that gives the maximum engine torque as a function of the current
speed is also present in this kind of models to ensure that the torque does not exceed
the limits of the engine. Figure 2.7 shows the typical engine map information with
fuel consumption or iso-efﬁciency contours, the maximum torque curve, and the
optimal operation line (OOL), i.e., the combination of torque and speed that provide
the maximum efﬁciency for any given power output. The OOL information is often
used in designing heuristic energy management strategies, as a target for the engine
operating points.

The map-based model can be modiﬁed to include dynamic limitations in the torque
output, i.e., a delay between the commanded torque and the actual torque generated,

2.4 Powertrain Components

19

Fuel consumption [g/s]

Efficiency

1

4

1

2

1

0

8

6

4

2

300

8

]

m
N

[
 
e
u
q
r
o
T

250

200

150

100

50

0

2

0

1

8

1

6

1

4

1

2

1

0

8

6

4

2

0

.

3
9

0

.

4

0

.

3
5

0

.

3
7

0

.

3
8

0.37

0
.
3

5

0.3
0.2

4
.
0

9
3
.
0

8
3
.
0

7
0.3

0.35
0 . 3
0.2

0.39
0.3 8

1000

2000

3000

4000
Speed [rpm]

5000

1000

2000

3000

4000
Speed [rpm]

5000

Fig. 2.7 Example of engine fuel consumption map and efﬁciency map (with optimal operation
line, OOL, in dashed-line)

by coupling it to a transfer function representing air/fuel dynamics and, possibly, to
an inertia representing the crankshaft dynamics.

2.4.2 Torque Converter

The torque converter is a ﬂuid coupling device that is used to transmit motion from
the engine to the transmission input shaft. It is capable of multiplying the engine
torque (acting as a reduction gear), and, unlike most other mechanical joints, provides
extremely high damping capabilities, since all torque is transmitted through ﬂuid-
dynamic forces rather than friction or pressure. It is traditionally used in vehicles
with automatic transmissions as a launching device, because it allows for large speed
differences between its two shafts while multiplying the input torque.

A torque converter (Fig. 2.8) is composed by three co-axial elements: a pump
(also called impeller), connected to the engine shaft, a turbine, connected to the
transmission, and a stator in between. The ﬂuid in the torque converter is moved by

Fig. 2.8 Schematic
representation of a torque
converter

engine

pump

transmission

turbine

20

2 HEV Modeling

the pump because of engine rotation, drags the turbine, and therefore transmits torque
to the transmission. The torque at the turbine is multiplied with respect to the pump
torque (i.e., the engine torque), thanks to the presence of the stator which modiﬁes the
ﬂow characteristics inside the converter. The torque multiplication increases with the
speed difference between the pump and the turbine; at steady state, the two elements
rotate at the same speed and the torque multiplication factor is unitary.

The torque converter model is based on tabulated characteristics of torque ratio

and capacity factor versus speed ratio. The speed ratio is

where ωt is the turbine speed and ωp the pump speed. The torque ratio or multipli-
cation ratio is

with Tt and Tp the turbine and pump torque respectively. The capacity factor, which
is a measure of how much torque the torque converter can transmit, is deﬁned as

SR =

ωt
ωp

,

MR = Tt
Tp

,

Ktc =

ωp(cid:3)
Tp

.

As an alternative to the capacity factor, the torque at 2000 rpm (MP2000) is some-
times used to characterize the torque capacity; it is related to the capacity factor as
follows:

MP2000 = 20002
K 2
tc

,

where Ktc must be expressed in units of RPM√
Nm
Examples of characteristic curves of a torque converter are shown in Fig. 2.9. The
map can be replaced by an analytical model, the Kotwicki model [6], based on curve
ﬁtting.

.

2.4.3 Gear Ratios and Mechanical Gearbox

Gearings are purely mechanical components, with no control, that change the speed
and torque transmitted between two shafts without altering the power ﬂow. In prac-
tice, however, losses due to friction occur and reduce the output power with respect
to the input power.

The simplest model for a gearing only accounts for the speed and torque ratios,
without considering the losses due to friction. Indicating with the subscripts b and f
the base and follower shaft (see Fig. 2.10), and with gfb = Nb
the transmission ratio
Nf

(2.13)

(2.14)

(2.15)

(2.16)

2.4 Powertrain Components

Fig. 2.9 Example of
a torque converter map

Fig. 2.10 Schematic
representation of a gear
coupling

2

1

y
c
n
e
i
c
i
f
f
E

 
,
o
i
t
a
r
 
e
u
q
r
o
T

Torque ratio
Efficiency
Capacity Factor

0.8
0.8

0

1
1

0

0
0

0.2
0.2

0.6
0.6
0.4
0.4
Speed Ratio

base shaft b

Nb

N f

follower shaft f

(N is the number of teeth of each gear), the lossless gear model is:

(cid:4)

ωf = gfbωb,
Tb.
Tf = 1
gfb

For energy analysis and in general for more accurate predictions, a lossy gear
model is introduced, which takes into account power losses. Given that the speed
ratio is ﬁxed, being given by kinematic constraints, the speed equation remains the
same as the lossless model, while the power loss means a reduction of the torque at
the output shaft, described using the gear efﬁciency ηfb:
(cid:4)

Tf =

ηfb
Tb
gfb
1
ηfb·gfb

Tb

if Pb = Tb · ωb ≥ 0,
if Pb = Tb · ωb < 0.

with the convention that power ﬂow is positive when going from b to f , i.e., when b
is the input shaft. The power loss is always positive and is calculated as

(cid:4)

Ploss =

ωbTb(1 − ηfb)
ωf Tf (1 − ηfb)

if Pb = Tb · ωb ≥ 0,
if Pb = Tb · ωb < 0.

21

10

5

r
o
t
c
a
F
 
y
t
i
c
a
p
a
C

(2.17)

(2.18)

(2.19)

22

2 HEV Modeling

Functionally, a gearbox is a gearing whose transmission ratio (and possibly other
characteristics, such as efﬁciency) can change dynamically. The simplest model for a
gearbox consists in a lossy gear with variable gear ratio; the efﬁciency can be assumed
constant or variable with gear ratio, speed, and input torque. This model captures the
essential functionality common to manual gearboxes and automatic transmissions,
and can be used for both cases. A complete transmission model with several degrees
of freedom (considering all the gears, coupling and actuators) is more suited for
drivability studies.

2.4.4 Planetary Gear Sets

Planetary gear sets are composed by three rotating elements (sun, carrier, and ring)
which are connected by internal gears (planets); stopping one of the three shafts gen-
erates a ﬁxed gear ratio between the remaining two. Planetary gears are commonly
used in traditional automatic transmissions because they allow for compact construc-
tion and smooth gear transition. They are often present in hybrid electric vehicles to
realize electrically variable transmissions (EVTs) by connecting the engine and two
electric machines to the three shafts of the gear set.

A schematic representation of a planetary gear set is shown in Fig. 2.11.
The tangential speed of the carrier (at the center of the planets, i.e., at a radius
intermediate between sun and ring) is the average of the sun and ring speeds. Indi-
cating with the subscripts s, r, and c the sun, ring, and carrier shafts, the following
kinematic constraint can be written:

ωc(Nr + Ns) = (ωrNr + ωsNs) ,

(2.20)

where Nr and Ns are the number of teeth of the ring and sun gear, respectively. The
reason for writing this relation in terms of number of teeth instead of radii is that—in
a given gear set—the number of teeth N of each gear is directly proportional to the
radius of the respective gear.

Introducing the planetary gear ratio ρ = Ns/Nr (the ratio of the number of teeth
of sun to the number of teeth of the ring), the kinematic relation (2.20) is written in

Fig. 2.11 Schematic
representation of planetary
gear set

c

s

r

r

c

s

2.4 Powertrain Components

Fig. 2.12 Torque balance on
the planets

23

Tc
(Ns + Nr)/2

Tr
Nr

Ts
Ns

the more compact form:

(1 + ρ)ωc = ρωs + ωr.

(2.21)

The torque at the carrier at steady state is equally split between the sun and the
ring; for the equilibrium of the planets (Fig. 2.12), the following torque equations
hold:

where, again, the number of teeth are used instead of the radii. Using the planetary
gear ratio ρ = Ns/Nr, the equilibrium equations become:

Tc
(Nr + Ns)

= Tr
Nr

Tc
(Nr + Ns)

= Ts
Ns

,

,

Tc = (1 + ρ)Tr,

Ts = ρTr.

(2.22a)

(2.22b)

(2.23a)

(2.23b)

Equations (2.21) and (2.23a, 2.23b) are the basis for modeling planetary gear sets.
The torque equations (2.23a, 2.23b) are only valid in steady-state conditions and
neglect losses, but can be used with reasonable accuracy in vehicle-level models.

2.4.5 Wheels, Brakes, and Tires

The wheel represents the link between the powertrain and the external environment.
Its model includes the motion of the wheel and the effect of the brakes, calculating the
forces at the interface between tire and road surface. The tractive force is calculated
given the powertrain torque, the brake signal and the vertical load on the wheel. A
quasi-static model is usually sufﬁcient, while dynamic tire models (see, for example,
[4]) are typically used in models for vehicle lateral dynamics (handling models).

The static tire model could be deﬁned a perfect rolling model, in which the torque
applied to the wheel shaft is completely transformed into tractive force considering

24

2 HEV Modeling

pure rolling motion between the tire and the road, and neglecting tire deformation.
These hypotheses work well for driving in normal conditions (not extreme accelera-
tions) on roads with good adherence (dry asphalt). Low-adherence roads or extreme
maneuvers require more accurate tire models to predict vehicle behavior in terms of
speed dynamics.

The brakes can be modeled as an additional torque that reduces the net torque
acting on the tire. The brake torque is proportional to the brake input signal. Therefore
the net tractive force acting on the wheels is

Ftrac = 1
Rwh

(cid:5)
Tpwt − Tbrake

(cid:6)

·

(2.24)

(2.25)

where Tpwt is the torque generated by the powertrain at the wheel shaft, Tbrake the
braking torque, and Rwh the wheel radius.

The wheel speed is

ωwh = vveh
Rwh

,

being vveh the longitudinal vehicle speed.

The value of longitudinal force is bounded by the vertical load acting on the wheel:

− Fzνx,max ≤ Ftrac ≤ Fzνx,max,

(2.26)

where Fz is the vertical force on the wheel, and νx,max is the peak value of the road/tire
friction coefﬁcient (usually around 0.8–0.9 for dry asphalt). In order to maintain
proper vehicle stability and maximize braking efﬁciency, the braking action must
be distributed between front and rear axles according to the normal load acting on
each, also accounting for the longitudinal load transfer generated by the deceleration.
From (2.1), the total tractive force during braking is:

Ftrac = Mveh ˙vveh + Froll + Faero + Fgrade.

(2.27)

This should be distributed between the front and rear axle (f and r) proportionally
to the vertical load on each, i.e.:

Ftrac,f
Ftrac

= b

a + b

− Mveh ˙vvehhCG
Mvehg(a + b)

Ftrac,r
Ftrac

= a

a + b

+ Mveh ˙vvehhCG
Mvehg(a + b)

(2.28)

(2.29)

where a and b are the distances of the center of gravity (CG) from the front and
rear axle respectively, and hCG its height from the ground. The terms that include
the acceleration ˙vveh represent the dynamic load transfer, from the rear axle to the
front axle during deceleration (negative ˙vveh), and in the opposite direction during

2.4 Powertrain Components

25

acceleration. In most passenger vehicles, the powertrain generates torque only on
one of the two axles. In that case, regenerative braking can only be applied to that
axle, and must be appropriately balanced by conventional braking on the other axle.
From the energy management standpoint, this means that not all the braking torque
can be regenerated, but only the fraction of it that is applied at the traction axle, i.e.,
(2.28) for front-wheel drive or (2.29) for rear-wheel drive vehicles.

2.4.6 Electric Machines

The electric machines can be modeled using an approach similar to the one used for
the engine, i.e., based on maps of torque and efﬁciency. Desired values of electrical
power or torque can be used as a control input. Rotor inertia is the main dynamic
element that is usually modeled, as the electrical dynamics are very fast in comparison
with the inertial dynamics or the engine dynamics.

The relation between torque at the shaft and electric power is provided by an
efﬁciency map, which can be expressed as a function of speed and torque, or speed
and electrical power (depending on the implementation).

The efﬁciency map can also include the power electronics between the main
electric bus and the machine to provide directly the electric power exchanged with
the battery; otherwise, an explicit power electronics efﬁciency should be included in
the model between the electric machine and the battery.

The efﬁciency model can be expressed as,
(cid:4)

Pmech = ωem · Tem =

ηem(ωem, Pelec) · Pelec
ηem(ωem,Pelec) Pelec

1

if Pelec ≥ 0 (motoring mode),
if Pelec < 0 (generating mode),

or, if electric power is the desired output, as

(cid:4)

Pelec =

1

η(ωem,Tem) Pmech =
ηem(ωem, T ) · Pmech = ηem(ωem, Tem) · ωem · Tem

ηem(ωem,Tem) ω · Tem

1

if Pelec ≥ 0 (motoring mode),
if Pelec < 0 (generating mode).

(2.30)

(2.31)

An example of efﬁciency map for an electric motor is shown in Fig. 2.13.

2.4.7 Batteries

Electrochemical energy storage systems such as batteries and capacitors are key
components of hybrid electric vehicles. A variety of models have been proposed to
evaluate their interaction with the rest of the powertrain [8].

26

Fig. 2.13 Example of
electric motor efﬁciency map
(elaboration of data in [7])

0.85

0 . 7 5
0.85

0.85

0.75

0.92

2
9
.
0

]

m
N

[
 
e
u
q
r
o
T

100

50

0

−50

−100

0

.

7
5

0

.

7
5

2 HEV Modeling

0.85

0.85

0.85

0.92

0.95

0.92

0.95

0.85

0.92

0.95

0.92

0.95

0.92

0 . 9 2

0.85

0.92

2

0 . 9

0 . 8 5

0.85

0

1000

8 5
3000

2000
Speed [rpm]

4000

Accurately modeling battery dynamics in hybrid electric vehicles is critical and
not trivial, because the main variables that characterize battery operation, i.e. state
of charge, voltage, current and temperature, are dynamically related to each other in
a highly nonlinear fashion. In general, the objective of the battery model in a vehicle
simulator is to predict the change in state of charge given the electrical load.

The state of charge (SOC) is deﬁned as the amount of electrical charge stored in

the battery, relative to the total charge capacity:

where Qnom is the nominal charge capacity, and Q(t) the amount of charge currently
stored. The SOC dynamics are given by:

SOC(t) = Q(t)
Qnom

,

(cid:4)

˙SOC(t) =

− 1
ηcoul
−ηcoul

I(t)
Qnom
I(t)
Qnom

if I(t) > 0
if I(t) < 0

(2.32)

(2.33)

where I is the battery current (positive during discharge), ηcoul is the Coulombic
efﬁciency [1] or charge efﬁciency, which accounts for charge losses and depends on
current operating conditions (mainly current intensity and temperature).

Calculating the state of charge (or, better, its variation) by integration of (2.33)
appears to be relatively straightforward, if the capacity is assumed to be a constant,
known parameter. In reality, the battery capacity and coulombic efﬁciency change
according to several parameters, and the numerical integration is reliable only in
simulation in the absence of measurement error and noise, which makes reliable
state of charge estimation a signiﬁcant portion of the actual battery management
system (BMS) [8].

In order to correlate the battery current and voltage to the power exchanged with

the rest of the powertrain, a circuit model of the battery can be used.

A simple dynamic model is a circuit like the one in Fig. 2.14, which represents a

second-order approximation.

2.4 Powertrain Components

V1

C1

V2

C2

Voc

+

I

R0

R1

R2

27

VL

Fig. 2.14 Battery equivalent circuit-based model (second-order)

Fig. 2.15 Battery circuit
model (no dynamics)

Voc

I+

R0

VL

The series resistance R0 represents the Ohmic losses due to actual resistance of
the wires and the electrodes and also to the dissipative phenomena that reduce the net
power available at the terminals; the resistances R1, R2 and the capacitances C1, C2
are used to model the dynamic response of the battery. The values of the parameters
are estimated using curve ﬁtting of experimental data, and are generally variable with
the operating conditions (temperature, state of charge, current directionality). Other
models of the same kind, with more or fewer R–C branches in series, can be used
depending on the required model accuracy. However, the number of parameters to
be identiﬁed increases with the model order. Very often, simpler models without any
R–C branch (Fig. 2.15) can also be used if the voltage dynamics can be neglected,
for example in quasi-static models focusing exclusively on efﬁciency considerations.
When no detailed data from battery testing is available, circuit models with a single,
constant R0 may be the only option.

The equations of the circuit in Fig. 2.14 are:

VL = Voc − R0I −

Vi,

n(cid:7)

i=1

Ci

dVi
dt

= I − Vi
Ri

,

(2.34)

(2.35)

where VL is the load voltage at the battery terminals, Voc is the open circuit voltage,
i.e., the voltage of the battery when it is not connected to any load (I = 0), R0 the series
resistance, Vi the voltage across the ith R–C branch (characterized by the resistance

28

2 HEV Modeling

Ri and the capacitance Ci), n is the order of the dynamic model considered, i.e., the
number of R–C branches. In the example shown, n = 2. The capacitance Ci and the
resistance Ri can change with the direction (charge or discharge) and amplitude of
the current and with other operating conditions, such as temperature and state of
charge; the variation can be taken into account by expressing the parameters as maps
(tables) instead of constants.

If voltage dynamics are neglected and the battery circuit is represented without
R–C branches as in Fig. 2.15, the circuit equation is easily written as a function of
the terminal power Pbatt:

Pbatt = VL · I = VocI − R0I 2,

(2.36)

thus providing an explicit expression of the current as a function of power:

I = Voc
2R0

−

(cid:8)(cid:9)

(cid:10)
2

Voc
2R0

− Pbatt
R0

.

The circuit representation of Figs. 2.14 and 2.15 and the corresponding equations
are referred to the entire battery pack. This is usually composed by many cells
connected in series (strings), and possibly several strings in parallels. The electrical
parameters of the circuit models are those of the entire pack, which can be computed
from the values of each cell as follows:

Voc = NSVoc,cell,

Ri = NS
NP

Ci = NP
NS

Ri,cell,

i = 0, . . . , n

Ci,cell,

i = 1, . . . , n

where NS is the number of cells in series in each string, and NP is the number of
strings in parallel.4

The open circuit voltage Voc is a typical characteristic of the battery (or, better, of
its cells) and is primarily a function of the state of charge. An example of variation
of the open circuit voltage Voc with the state of charge for a single Li-Ion cell is
shown in Fig. 2.16. The ﬁgure also shows the internal resistance of the same cell. It
is common practice to refer to the value of the current in terms of its C-rate, i.e., as
a fraction of the battery capacity (expressed in Ah): for example, if the capacity is
6.5 Ah, a current of 1 C corresponds to 6.5 A, 10 C–65 A, 0.1 C–0.65 A. Steady-state
characteristics of the battery, such as those of Fig. 2.16, are typically obtained using
a current of 1 C.

4Equations (2.38)–(2.40) are simpliﬁcations based on the assumption of ideal cells, all identical.
In reality, each cell may have slightly different characteristics, for manufacturing issues and for
normal imbalance during operation.

(2.37)

(2.38)

(2.39)

(2.40)

2.4 Powertrain Components

Fig. 2.16 Typical
characteristics of open
circuit voltage and internal
resistance for a Li-Ion cell
(Data referred to one blended
cathode composed of
layered-oxide positive
electrodes and spinel oxide
positive electrodes pouch
Li-Ion cell, obtained from
experiments at the Center for
Automotive Research—The
Ohio State University)

29

Open−circuit voltage [V]

4.2

4

3.8

3.6

3.4

2.4

2.2

2

−3

x 10

Internal resistance [Ohm]

1.8

0

0.2

0.4
State of Charge

0.6

0.8

1

Apparently, integration of the current is sufﬁcient to calculate the state of charge;
however, in real-world applications, this is not stable (for numerical drift) nor accurate
(for modeling approximations); therefore, more complex SOC estimation algorithms
are used, which provide an estimate of the battery state of charge given available
measurements of terminal voltage and current.

An important issue related to battery usage in hybrid electric vehicles is their
aging, due to the aggressive loading cycles to which they are subjected. Battery
aging manifests itself as loss of capacity and increase of internal resistance and can
reduce vehicle performance; recent and ongoing research is devoted to determine a
suitable model that can predict the amount of residual life given the loading cycles
[9–13].

The dependence on aging does not affect battery performance in the short term
and is only apparent over a long period of time, that exceeds any typical power-
train/vehicle simulation horizon; therefore, it is not taken into account as a dynamic
effect in this study.

2.4.8 Engine Accessories and Auxiliary Loads

The engine powers several auxiliaries, such as air conditioning, power steering,
alternator for small electric loads, etc. A simpliﬁed modeling approach is often used,
for the lack of detailed data and load cycles for all the components, using the net
power as an input in the form of a load cycle, and computing the torque as the ratio

30

2 HEV Modeling

of power to speed, including an efﬁciency computed using a look-up table, curve
ﬁtting, or constant value (depending on the case).

Auxiliary loads are important especially in heavy-duty vehicles with specialized
use, but may be signiﬁcant also in passenger vehicles. For example, the power demand
of the air-conditioning system in a compact car can be as high as 10 % of the maximum
engine power. Due to the great variety of possible auxiliary loads in a vehicle, an
attempt to ﬁrst-principle modeling cannot be generalized and must be derived for
the speciﬁc application. For this reason, instead of dealing with detailed modeling
of the accessories, the usual approach is to assume a known torque or power proﬁle
generated by the auxiliary loads at the engine shaft (if they are mechanically driven),
or electric power at the bus interface (if they are electrically powered). In many cases,
especially for passenger cars, the auxiliary loads are assumed to be constant for the
entire driving cycle, using an estimate average value, whose order of magnitude is
1–4 kW.
Energy management in hybrid vehicles consists in deciding the amount of power
delivered at each instant by the energy sources present in the vehicle while meeting
several constraints. In this chapter, the role and main features of the energy man-
agement controller are introduced, and the problem of designing such a controller is
formalized using optimal control theory.

3.2 Energy Management of Hybrid Electric Vehicles

Controlling an HEV includes essentially two sets of tasks. One is the low-level or
component-level control task, where each powertrain component is controlled by
using classical feedback control methods. The second task, referred to as high-level
or supervisory control, is responsible for the optimization of the energy ﬂow on-
board of the vehicle while maintaining the battery state of charge within a certain
range of operation. This layer of control, called Energy Management System (EMS),
receives and processes information from the vehicle (ωeng, ωgb, ωmot) and the driver
(vveh, aveh, δ) to output the optimal set-points sent to the actuators and executed by
the low-level control layer. The EMS also selects the best modes of operations of
the hybrid powertrain, including start–stop, power split, and electric launch. The
two-task based control scheme of an HEV is shown in Fig. 3.1.

Realistic ﬁgures of achievable improvement in fuel economy in HEVs range from
10 % for mild hybrids to more than 30 % for full hybrid vehicles [1]. This potential
can be realized only with a sophisticated control system that optimizes energy ﬂow
within the vehicle. It has been recognized that the adoption of systematic model-
based optimization methods using meaningful objective functions to improve the
energy management controllers is the pathway to go in order to achieve near-optimal
results in designing the vehicle EMS.

This books presents several model-based optimization techniques for energy

management of hybrid electric vehicles.
From the driver

Preq

From the vehicle
vveh ωeng ωmot

Energy 
Management 
System

Tice

SOC

itr

Tmot

ECU

BMS

TCU

MCU

l

o
r
t

n
o
c
 
l

e
v
e
l
-
h
g
H

i

l

o
r
t
n
o
c
 
l
e
v
e
l
-

w
o
L

Powertrain

ECU  Engine Control Unit

BMS  Battery Management System

TCU  Transmission Control Unit

MCU  Motor Control Unit

Fig. 3.1 Two-layer control architecture in a hybrid vehicle. The EMS elaborates information from
the driving mission and the powertrain components to generate actuator set-points corresponding
to the optimal power split between the primary and secondary energy sources (high-level control).
The powertrain components control (lower level control) is then performed on single components
using traditional closed-loop control methods

In a conventional (non-hybrid) vehicle, there is no need for an energy management
strategy: the driver decides the instant power delivery using the brake and accelerator
pedals, and, in manual transmission vehicles, decides what gear is engaged at each
time. The driver’s desires are translated into actions by the low-level control: for
example, the engine control unit (ECU) determines the amount of fuel to be injected
given the desired torque request; the automatic transmission controller in the TCU
decides when to shift gear based on engine conditions and vehicle speed, etc.

In a hybrid vehicle, on the other hand, there is an additional decision that must be
taken: how much power is delivered by each of the energy sources on-board of the
vehicle. This is why all hybrid vehicles include an energy management controller,
interposed between the driver and the component controllers. As mentioned, the aim
of the energy management system is to determine the optimal power split between
the on-board energy sources. The decision on what to consider optimal depends
on the speciﬁc application: in most cases, the strategies tend to minimize the fuel
consumption, but optimization objectives could also include the minimization of
pollutant emissions, maximization of battery life, or—in general—a compromise
among all the above goals.

The role of the energy management system in a hybrid vehicle can also be rep-
resented as in Fig. 3.2. The outer layer in the ﬁgure is the speed control, which is
the human driver in a real vehicle and a driver model (typically a PI controller) in

3.2 Energy Management of Hybrid Electric Vehicles

33

Actuator
set points

Low level 
Control

Powertrain + 
vehicle (plant)

Measurements

Pice

Pbatt

SOC(t)

vre f (t)

+

-

Driver 
(speed 
tracking)

Preq

Energy 
Management
System

vveh(t)

Fig. 3.2 The role of energy management system

simulation. The speed controller decides the total power request Preq that the power-
train must deliver in order to follow the prescribed velocity proﬁle. The inner layer is
the energy management system, which decides how to split the total power request
between the on-board energy sources: the rechargeable energy storage system and the
internal combustion engine. When designing the energy management strategy, the
separation of the two controllers allows to consider only the battery state of charge
dynamics as the system state and neglect the vehicle speed, since this is controlled
directly by the driver.

3.3 Classiﬁcation of Energy Management Strategies

Several families of energy management strategies have been proposed in literature.
Two general trends can be identiﬁed that deal with the energy management problem,
namely rule-based and model-based optimization methods [2–4].

The main characteristic of rule-based approaches is their effectiveness in real-
time implementation. They do not involve explicit minimization or optimization, but
rely on a set of rules to decide the value of the control to apply at each time. Rules
are generally designed based on heuristics [5], intuition, or from the knowledge of
optimal global solution generated with mathematical models through optimization
algorithms [6–8].

In model-based optimization strategies, the optimal actuator set-points are cal-
culated by minimization of a cost function over a ﬁxed and known driving cycle,
leading to a global optimal solution. This generates a noncausal solution in that it
ﬁnds the minimum value of the cost function using knowledge of the future driving
information. Although model-based optimization control methods cannot be used
directly for real-time implementation and do not directly lend themselves to practical
implementation, due to both their preview nature and computational complexity, they
constitute a valuable design tool. In fact, they can be used to design rules for online
implementation or used as a benchmark solution to evaluate the performance of other
control strategies. We can divide model-based optimization methods into numerical

34

3 The Energy Management Problem in HEVs

and analytical approaches. In numerical optimization methods, like dynamic pro-
gramming [6, 9], simulated annealing [10], genetic algorithms [11], and stochastic
dynamic programming [12, 13], the entire driving cycle is taken into consideration
and the global optimum is found numerically.

Analytical optimization methods, on the other hand, use an analytical problem
formulation to ﬁnd the solution in closed, analytical form, or at least provide an ana-
lytical formulation that makes the numerical solution faster than the purely numerical
methods. Among these methods, Pontryagin’s minimum principle [14] is the most
important. Equivalent consumption minimization strategy also belongs to this cat-
egory in that it consists in the minimization, at each time step of the optimization
horizon, of an appropriately deﬁned instantaneous cost function. This leads (ideally)
to the minimization of the global cost function, if the instantaneous cost function
(similar to an instantaneous equivalent fuel consumption) is suitably deﬁned. Other
model-based strategies consider information about future driving conditions in addi-
tion to past and present, for example, using a receding-horizon optimization approach
[15–17].

3.4 The Optimal Control Problem in Hybrid Electric

Vehicles

Regardless of the powertrain topology, the essence of the HEV control problem is
the instantaneous management of the power ﬂows from energy converters to achieve
the control objectives. One important characteristic of this problem is that the control
objectives are mostly integral in nature (for instance, fuel consumption) or semi-local
in time, such as drivability, while the control actions are local in time. Furthermore,
the control objectives are often subject to integral constraints, such as maintaining
the battery SOC within a prescribed range [18]. In general, the energy management
problem in a hybrid vehicle can be cast into an optimization problem over a ﬁnite
time horizon, whose solution can be found in the pool of optimal control theory
methods which are aimed at ﬁnding a control law for a given system such that a
certain optimality criterion, usually deﬁned as an integral performance index over a
certain time frame, is achieved.

Traditional optimal control techniques can be used only with simple mathematical
models of the system, assuming perfect knowledge of the entire optimization horizon
(time frame over which the optimization is deﬁned); since both these conditions are
usually not respected by real systems, optimal control implementation in a physical
dynamic system, whose future is unknown, is necessarily suboptimal.

3.4 The Optimal Control Problem in Hybrid Electric Vehicles

35

3.4.1 Problem Formulation

In this section, we formulate the supervisory control problem when the total mass of
fuel, mf , [g], is being minimized during a driving mission.1

The optimal energy management problem in a hybrid electric vehicle consists of
ﬁnding the control u(t) that leads to the minimization of the fuel consumed, mf , over
a trip of length tf (starting at t0 = 0). This is equivalent to minimizing the integral
performance index J:

J =

˙mf (u(t), t)dt,

(3.1)

(cid:2)

tf

t0

where ˙mf [g/sec] is the mass ﬂow rate of fuel used. The minimization of J is subject
to constraints related to physical limitations of the actuators, limitation in the energy
stored in the RESS and the requirement to maintain the battery SOC within prescribed
limits. This makes the optimal energy management problem a constrained, ﬁnite-time
optimal control problem, where the objective function (3.1) is minimized under a set
of both local and global constraints on the state and control variables, as outlined in
the following.
System Dynamics. From (2.33) and with x(t) = SOC and u(t) = Pbatt, the system
dynamics are given by:

˙x(t) = − 1

ηsign(I(t))
coul

I(t)
Qnom

.

(3.2)

For the control design, a control-oriented model of the battery is used based on a
zero-th order equivalent circuit model, shown in Fig. 3.3, whose parameters are: the
equivalent resistance, R0(SOC) and the open circuit voltage, Voc(SOC).2 The SOC
variation can be expressed as a function of the battery power:

VL(t)I(t) = Pbatt(t) = u(t) = Voc(x)I(t) − R0(x)I 2(x)

(3.3)

Solving (3.3) for the current and replacing it into (3.2) yields:

˙x = −

1
ηsign(I(t))
coul

Qnom

(cid:5)(cid:6)

⎡
⎣ Voc(x)
2R0(x)

−

(cid:7)
2

Voc(x)
2R0(x)

− u(t)
R0(x)

⎤

⎦

(3.4)

1We limit our focus to the problem of fuel consumption minimization, with no inclusion of drivability
considerations. Typically, the gear shifting optimization pertains to the transmission control and
it is not an objective of the supervisory control. The optimization of the gear shifting strategy
would require the formulation of an optimal control problem which includes both continuous time
and discrete time dynamics. In this work, we assume that the transmission controller operates
independently of the supervisory controller, therefore the gear shifting strategy is treated as a
known external input to the energy management system.
2In general, both the resistance and open circuit voltage are dependent also on temperature, θ. In
this study we neglect the effect of the temperature on the battery parameters.

36

3 The Energy Management Problem in HEVs

Fig. 3.3 Zero-th order
equivalent circuit-based
model of the battery used for
control design

Voc

I+

R0

VL

(3.6)

(3.7)

which is written in the general form:

˙x(t) = f (x(t), u(t)).

(3.5)

The optimization problem is subject to several constraints. Some of them are
integral in nature (for example, the ﬁnal SOC target); some are local (instantaneous
power limits, state of charge boundaries).
Global Constraints. The ﬁnal SOC value x(tf ) should reach a predeﬁned value
xtarget:

x(tf ) = xtarget.

In other words, it is required that

x(tf ) − xtarget = Δx = 0.

In a charge-sustaining HEV, the net energy from the battery should be zero over a
given driving mission, meaning that the SOC at the end of the driving cycle, x(tf ),
should be the same as that at the beginning of the driving cycle, i.e., xtarget = x(t0). In
other applications, for example PHEVs, where a positive net energy consumption is
desired (battery depletion), the SOC target value may be lower than initial one. Equa-
tion (3.7) deﬁnes the global state constraints of the control problem, and is justiﬁed
mainly as a way to compare the results of different solutions by guaranteeing that
they start and reach the same level of battery energy. In practical vehicle applications,
it is sufﬁcient to keep the SOC between two boundary values, in that some difference
between the desired and actual SOC at the end of a cycle is acceptable and does not
affect the vehicle functionality.

Local Constraints. Local constraints are imposed on the state and control variables.
The local (or instantaneous) constraints on the state concern the fact that the state of
charge must remain between a maximum and a minimum value (to make the battery
work at high efﬁciency and preserve its cycle life), whereas local constraints on the
control variables are imposed to guarantee the physical operation limits (maximum
and minimum engine, motor and generator torque and speed, and battery power).

3.4 The Optimal Control Problem in Hybrid Electric Vehicles

37

Overall, the local constraints are:

SOCmin ≤ SOC(t) ≤ SOCmax,
Pbatt,min ≤ Pbatt(t) ≤ Pbatt,max,
Tx,min ≤ Tx(t) ≤ Tx,max,
ωx,min ≤ ωx(t) ≤ ωx,max, x = eng, mot, gen,

(3.8)

where the last two inequalities in (3.8) represent limitations on the instantaneous
engine and motor torque and speed, respectively; (·)min, (·)max are the minimum and
maximum value of SOC/power/torque/speed at each instant.

Other local constraints could be included related to drivability or comfort issues:
for example, it is usually a good idea to limit the frequency of switching between
operating modes. In this book, we limit our discussion only to local constraints
expressed by (3.8).

In addition to meeting the local and global constraints, at each instant the super-

visory controller ensures that the total power demand at the wheels is satisﬁed.

Problem 3.1 The optimal energy management problem in a charge-sustaining
HEV consists in ﬁnding the control sequence u∗ that minimizes the cost function
(3.1) while meeting the dynamic state constraint (3.5), the global state constraint
(3.7) and local state and control constraints (3.8).

Note
The constraints on the state of charge are very important for its control. A charge-
sustaining hybrid vehicle is so called because its battery SOC at the beginning and
the end of each trip is nominally the same, which means that the vehicle maintains
its own electrical charge without need for external recharging. On the other hand, a
charge-depleting or plug-in hybrid vehicle (PHEV) can be recharged using an electric
outlet, and therefore the SOC after a trip can be lower than it was at the beginning.
In charge-sustaining HEVs ultimately all the energy consumed derives from fuel,
while in PHEVs part of can be obtained from the electric power grid.

3.4.2 General Problem Formulation

The energy management problem as deﬁned in Problem 3.1 is a particular case of
a more general optimal control problem in case fuel consumption is the objective
to minimize and charge-sustaining operation is enforced through hard constraints
(3.7). Nonetheless, energy management problems for different applications can be
formulated from the general formulation reported below.

Consider a generic dynamic system with state equation

˙x(t) = f (x(t), u(t), t),

(3.9)

where x(t) ∈ Rn indicates the state vector, and u(t) ∈ Rp is the control vector.

38

3 The Energy Management Problem in HEVs

The charge-sustaining constraint has been taken into account as a hard constraint
in (3.7) by requiring that the energy stored at the end of the mission equal the value
at the beginning of the mission. Alternatively, this constraint can be enforced as a
soft constraint, that is, by penalizing deviations from the initial value of the energy
stored at the end of the mission.

This is done by means of a penalty function φ(x(tf )) (generally, a function of
the difference x(tf ) − x(t0)) to be added to the performance index (3.1) to obtain a
charge-sustaining performance index of the form [2]:

J = φ(x(tf )) +

˙mf (u(t), t) dt.

(3.10)

(cid:2)

tf

t0

Soft constraints modify the cost function with the term φ(x(tf )) in order to induce the
ﬁnal value of the constrained variable to be close, but not necessarily identical, to the
desired target. For instance, in [19] the soft constraint is represented by a quadratic
function of the difference x(tf ) − x(t0), namely φ = α||x(tf ) − x(t0)||2
2 where α is a
positive weighting factor.

Using a quadratic function tends to equally penalize positive and negative devi-
ations from the target SOC, xtarget, regardless of the sign of the deviation. In [2], a
linear penalty function of the type

φ(x(tf )) = w(x(t0) − x(tf )),

(3.11)

is proposed, where w is a positive constant. With (3.11) the battery use is penalized
while favoring the energy stored. The soft constraints (3.11) are in effect a penalty
term that can be expressed as:

φ(x(tf )) = w

˙x(t)dt.

(3.12)

Engine exhaust emissions [19–22], battery aging [23], drivability [24, 25], ther-
mal dynamics [26] considerations can be included in the performance index, J, by
considering a more general expression

J = φ(x(tf )) +

L (x(t), u(t), t) dt

(3.13)

(cid:2)

tf

0

(cid:2)

tf

t0

where L(·) is the cost function. Several objectives can be combined together by
introducing a weighting factor for each [27], for instance: fuel consumption and
battery aging.

The optimal control problem in the time interval t ∈ [t0, tf ] corresponds to choose
the law u : [t0, tf ] (cid:5)→ Rp that leads to the minimization of the cost function (3.13)
under dynamic, local, and global constraints.

In general, the constraints on the states can be expressed by deﬁning the set of

admissible states as those for which the conditions G(x, t) ≤ 0 are satisﬁed, i.e.,

3.4 The Optimal Control Problem in Hybrid Electric Vehicles

39

(cid:9)x(t) = {x ∈ Rn|G(x, t) ≤ 0} ,

where the function G(x, t) : Rn (cid:5)→ Rm represents a set of m inequalities that the
components of the state vector must satisfy. For example, if x(t) must remain between
xmin and xmax, two inequalities can be written (i.e., m = 2):

Generally, the set of admissible states and controls are deﬁned as:

G1(x(t)) = x(t) − xmax ≤ 0
G2(x(t)) = xmin − x(t) ≤ 0

(cid:10)

G (x(t)) ≤ 0
u(t) ∈ U(t)

∀t ∈ [t0, tf ]

(3.14)

(3.15)

(3.16)

where U(t) indicates the set of admissible control values at time t.

The local constraints (3.16) are instantaneous conditions that must be satisﬁed at
each instant of time. The notation G (x(t), t) ≤ 0 is generic and the function G(·)
is, in general vectorial. In most cases, it has two components representing the two
inequalities xmin(t) ≤ x(t) ≤ xmax(t).

The general optimal control problem can be stated as follows:

Problem 3.2 The constrained-ﬁnite time horizon optimal control problem con-
sists in ﬁnding the control vector u∗ that minimizes the cost function (3.13) while
meeting the dynamic state constraints (3.9), and the local state and control constraints
(3.16).

In the following chapters, techniques and methods to solve Problem 3.1 are pre-

sented and discussed in depth.

In this chapter, we present the ﬁrst of a series of methods discussed in this brief to
solve the optimal control problem formulated in Chap. 3. The dynamic programming
is a numerical method that ﬁnds the global optimal solution by operating backwards
in time.

Life can only be understood backwards; but it must be lived forwards.

(S. Kierkegaard)

4.2 General Formulation

Dynamic programming is a numerical method for solving multistage decision-
making problems [1, 2]. It is capable of providing the optimal solution to problems
of any complexity level (in the limits of computational capabilities); however, it is
noncausal and is only implementable in simulation environment, because it requires
a priori information about the entire optimization horizon. The study of Dynamic
programming dates back to Richard Bellman, who wrote the ﬁrst book on the subject
in 1957 [2], where he stated what is today called Bellman’s principle of optimality:

An optimal policy has the property that whatever the initial state and initial decision are, the
remaining decisions must constitute an optimal policy with regard to the state resulting from
the ﬁrst decision.

In other words, from any point on an optimal trajectory the remaining trajectory

is optimal for the corresponding problem initiated at that point.

Consider the discrete-time system

xk+1 = fk(xk, uk)

where k takes integer values, say k = 0, 1, . . .. Let uk be the control variable
whose value is to be chosen at time k. Both the state x and the control u are bounded
and discretized, i.e., they can assume values in their respective domains: uk ∈ Uk
and xk ∈ Ωk.

Let us consider the following control policy over the ﬁrst N time steps:

u = {u0, u1, . . . , u N −1}

The cost of the policy u, starting at initial conditions x0, is

J (x0, u) = L N (x N ) +

L k(xk, uk)

(4.1)

where L k is the instantaneous cost function (the same as the integrand in the
continuous-time formulation (3.13)), also called arc cost in the context of dynamic
programming. The cost function obtained with the optimal solution is

J ∗(x0) = min

J (x0, u)

u

(4.2)

and the corresponding optimal policy is u∗ = {u∗
1

, u∗
2

, . . . , u∗

N −1

}.

Consider now the “tail subproblem” of minimizing the cost-to-go Y from time i

(and state xi ) to time N :

Y (xi , i) = L N (x N ) +

L k(xk, uk),

(4.3)

which corresponds to the last part of the overall problem. Bellman’s principle of
optimality states that the “tail policy” {u∗
, u∗
} is the optimal policy for
i
the tail subproblem.1 This statement ﬁnds an analytical justiﬁcation in the induction
principle [1].

, . . . , u∗

N −1

i+1

The dynamic programming algorithm is based on Bellman’s principle of opti-
mality. Starting from the ﬁnal step N , the algorithm proceeds backward using the
sequence of controls that generate the optimal cost-to-go, i.e.,

uk = μ∗(xk, k) = arg min
u∈Uk

(cid:3)

(cid:4)

(cid:5)(cid:6)

L k(xk, u) + Yk+1

fk(xk, uk), uk

(4.4)

for k = N − 1, N − 2, . . . , 1.

Y (x1, 1), generated at the last iteration, is equal to the optimal (minimum) cost
J ∗(x0). Y (x N , N ) = L N (x N ) is the terminal cost, which depends on the ﬁnal state
x N . Note that the symbol Y (xk, k) denotes the optimal cost-to-go from state xk
(at time k) to the end of the optimization horizon, while Yk(xk, uk) is a function
that depends on the control value uk, and represents the alternative values that the

1In the tail subproblem you are at xi at time i and wish to minimize the cost-to-go from time i to N .

4.2 General Formulation

43

cost-to-go from that same state can assume, depending on the control uk. In other
words, Y (xk, k) is the minimum value that Yk(xk, uk) can assume as uk changes.
The optimal control sequence can be found by proceeding backward from the ﬁnal
state, choosing at each step the control that minimizes the cost-to-go Yk(xk, uk), and
storing in a matrix μ∗ the optimal choice at each time instant k and state value xk.
Since the state values are discretized in the algorithm, but most physical systems
are deﬁned by a continuous state, the application of a given control action within the
discrete control set might result in the system reaching a state which is not one of
the discretized values Ωk, but intermediate between two of them. In this case, the
computation of the cost at the grid values is based on interpolation.

To summarize [3]:

• The optimal control sequence μ∗ is a function only of xk and k.
• The optimal control law is expressed in closed loop form. It is optimal regardless

of the past control policy.

• The Bellman equation is solved by backwards induction: the later policy is decided

ﬁrst.

in HEVs

4.3 Application of DP to the Energy Management Problem

Dynamic programming can be used to solve the optimal energy management prob-
lem deﬁned in Sect. 3.4.1. The sequence of controls uk (decisions) represents the
power split between the internal combustion engine and the rechargeable energy
storage system at successive time steps. The cost corresponds to fuel consumption,
energy consumption, emissions, or any other design objective. The set of choices
at each instant (set Uk) is determined by considering the state of each powertrain
component and the total power request. The number of solution candidates that can
be considered and evaluated is a compromise between the computational capabilities
and the accuracy of the result: in fact, the minimum cost may not exactly coincide
with one of the selected points, but the closer these are to each other, the better the
approximation of the optimal solution.

Once the grid of possible power splits, or solution candidates, is created, the
procedure outlined earlier can be used, associating a cost to each of the solution
candidates. Proceeding backwards (i.e., from the end of the driving cycle), the optimal
cost-to-go is calculated for each grid point, and stored in a matrix of costs. When
the entire cycle has been examined, the path with the lowest total cost represents the
optimal solution.

As an example, consider the case of a series HEV in which the decision variable
is the battery power, Pbatt , which is chosen from a set of admissible values (between
a maximum and minimum bound).

Starting from the end of the driving cycle (supposed known), the arc costs of all
feasible paths are calculated at each time step; feasible paths are deﬁned as those

44

4 Dynamic Programming

corresponding to an SOC variation compatible with the limits on the battery power.
The cost is computed from the powertrain model as the fuel consumption of the
engine corresponding to a given battery power decision, which also corresponds to
a given SOC variation.

The objective of the dynamic programming algorithm is to select the optimal
sequence of battery power such that the total cost is minimized. Selecting a sequence
of battery power values leads to deciding a sequence of values of battery SOC, in that
the variation of SOC between time steps is proportional to the integral of the battery
power between those steps. The correspondence between the control variable and
state variation is univocal.

The selection of battery power and SOC values must satisfy the constraints on the
admissible maximum and minimum battery power and state of charge, since only
the admissible values are considered. Also, the initial and ﬁnal values of SOC are set
with no effort (state global constraints).

The ﬂowchart in Fig. 4.1 illustrates the implementation of the DP algorithm in its

basic form.

The state vector xvec is deﬁned and discretized with a step of δx from a minimum
value of xmin to a maximum value of xmax . The length of the vector xvec is Nx . The
same is done for the control vector, uvec, which contains Nu components from the
minimum value, umin to a maximum value, umax . At time step k = N , the ﬁnal cost-
to-go corresponds to the terminal cost L N . This is computed for each admissible
state value within xvec. If the ﬁnal state is constrained to a speciﬁc value or range of
values, only a subset of xvec is admissible at the ﬁnal time step, meaning that the cost
associated to reaching one of the nonadmissible state values is set to inﬁnite. Then,
as the time progresses backwards, the arc cost L k(xk, uk) for all the combinations
of state values and controls is computed and stored in the matrix L k(m, n), where
the indices m and n correspond to the state and control respectively. The matrix L k
contains the costs of moving from each admissible nodes (each element of xvec) at
time k to all the reachable nodes at time k + 1 (i.e., the states that are obtained by
applying each element of uvec).

Then, the cost-to-go candidates Yk(m, n), which represent the cost to reach the
end of the horizon starting at time k from the state xvec(m) and choosing uvec(n) as
the ﬁrst control action, are computed. The optimal cost-to-go Y (m, k) is obtained by
choosing the control uk that generates the minimum of Yk(m, n). For each admissible
state index m, the control index that generates the optimal cost-to-go at time k is stored
in the matrix μ∗(m, k). This is repeated until the initial time is reached (k = 1), at
which point the optimal control sequence is found. With the optimal control matrix
just computed, μ∗(m, k), the cycle is then run forward in time and the optimal control
and state sequence are computed.

4.3 Application of DP to the Energy Management Problem in HEVs

45

Cycle to compute arc costs and cost-to-go, starting from last 
time instant:

k = N

state and control:

Start

xvec = {xmin, xmin + δ x, · · · , xmax}
uvec = {umin, umin + δ u, · · · , umax}

Compute cost-to-go at last time instant (terminal 
cost) for each admissible state value:

Y (T ) = LN(xvec)

k = k − 1

Compute arc cost for all combinations of state 
values and all controls:

xvec
for m = 1:length(      )
uvec
     for n = 1:length(       )
          
Lk(m, n) = Lk(xvec(m), uvec(n))

     end
end

Compute optimal cost-to-go and corresponding 
index for each state value, and store them as 
μ∗
Y
matrices     and      :

xvec
for m = 1:length(       )

uvec
     for n = 1:length(       )
          

xk+1(m, n) = fk(xvec(m), uvec(n))

Yk(m, n) = Y (xk+1(m, n), k + 1) + Lk(m, n)
Y (m, k) = min
(Yk(m, n))
n
μ∗(m, k) = arg min
n

(Lk(m, n))

     end

end

k > 1

k = 1

exit

Forward cycle to apply the optimal 
control matrices just computed:

mk
Note: in these equations, the index       
xk = xvec(mk)
is such that                         

End

x1 = x0
u1 = μ∗(m1, 1)

for k = 2:N

xk+1 = fk(xk−1, uk−1)
uk = μ∗(mk, k)

end

Fig. 4.1 DP implementation ﬂowchart

46

state 
index m

SOC

1

0.7

2

0.65

A

3

0.6

state 
index m

SOC

1

0.7

2

0.65

A

3

0.6

1.8

1

1.6

4.8

5.1

4.9

|
1

|
1

1.9

1.4

1.2

2.5
2.9
1.6

0.9

1.7

2.7

4.4

3

3.7

5.0
4.5
4.1

3.4

3.3

5.2

B

C

D

|
2

B

C

D

|
2

4 Dynamic Programming

2.4

2.3

1.8

1.5
1.2
0.9

1.4

1.6

1.9

3.8

4.2

2.5

2.9
3.1
1.6

2.8

3.5

2.6

E

F

G

|
3

E

F

G

|
3

1.4

1.9

0.7

1.4

1.9

0.7

H

I

K

|
4

H

I

K

|
4

|
N

time index k

L

L

|
N

time index k

Fig. 4.2 Arc costs in the simpliﬁed example. The points represent the state values; the arrows out
of each point represent the control choices (uvec), and point to the state value that would be obtained
by applying that control. The numbers on each segment indicate the arc costs L k (x, u), i.e., the cost
incurred (during a single time step) in choosing that control action

Fig. 4.3 Cost-to-go. The number on each segment starting at a state/time point represents the
minimum cost-to-go Y (x, k), from that point to the end, that would be incurred by choosing the
corresponding control at that time step (and the relative optimal sequence afterwards)

4.3.1 Implementation Example

To illustrate the process, consider the simple example shown in Figs. 4.2 and 4.3.
The battery state of charge SOC can take three values: xvec = {0.7, 0.65, 0.6},
(i.e., m = 1, 2, 3) at each time step (k = 1, . . . , N , where N = 5). The control
(battery power) can take ﬁve values: uvec = {−0.1, −0.05, 0, 0.05, 0.1}: the numer-
ical values indicate the corresponding SOC variation, the index n thus ranges between
1 and 5.

The constraints on the battery power are expressed in terms of maximum and
minimum variation of SOC between two subsequent time steps, and depend on

4.3 Application of DP to the Energy Management Problem in HEVs

47

the SOC value. For example, when the SOC is at its maximum value, it cannot
increase anymore, and therefore only zero or negative values of u are admissible,
i.e., n = 1, 2, 3. The arc costs L k(xk, uk) are ﬁrst computed. These are the costs of
moving from all admissible nodes at time k to all the admissible nodes at time k + 1.
Figure 4.2 shows all the admissible arc costs in this case: for example, at time
k = N − 1 = 4, all three values of SOC are admissible (nodes H, I, K), but only one
is accepted at the ﬁnal time (node L); thus, three arc costs must be deﬁned: H→L
(u = −0.05), I→L (u = 0) and K→L (u = +0.05). At time k = 3, instead, there
are nine possible combinations (from any of the nodes E, F, G to any of the nodes
H, I, K). Similar considerations can be made for all other time steps. The arc costs
are shown in Fig. 4.2. Once all the arc costs have been determined, the cost-to-go
can be calculated, starting from the ﬁnal point and going backwards (Fig. 4.3). At
time k = 4, the cost-to-go Y4(x4, u4) of each node H, I, K corresponds to the arc
cost because the following time instant is the end of the optimization horizon. At
time k = 3, the optimal cost-to-go of each node corresponds to the minimum cost
associated with moving from that node to the end. So, for node E, the cost-to-go is the
one corresponding to the path with minimum cost among the possible alternatives:
E→H→L, E→I→L, and E→K→L. The respective values of cost-to-go, computed
using the arc costs in Fig. 4.2, are:

The control indexes n = 4 and n = 5 are not admissible, since they would overcharge
the battery, and for this they are not considered. On the other hand, in node F, the
admissible control values are n = 2, 3, 4 and in node G they are n = 3, 4, 5; the
corresponding cost-to-go values are:

Y3(m = 1, n = 3) = 2.4 + 1.4 = 3.8
Y3(m = 1, n = 2) = 2.3 + 1.9 = 4.2
Y3(m = 1, n = 1) = 1.8 + 0.7 = 2.5.

Y3(m = 2, n = 4) = 1.5 + 1.4 = 2.9
Y3(m = 2, n = 3) = 1.2 + 1.9 = 3.1
Y3(m = 2, n = 2) = 0.9 + 0.7 = 1.6.

Y3(m = 3, n = 5) = 1.4 + 1.4 = 2.8
Y3(m = 3, n = 4) = 1.6 + 1.9 = 3.5
Y3(m = 3, n = 3) = 1.9 + 0.7 = 2.6.

The cost-to-go values are shown in Fig. 4.3 in correspondence of the respective
path. Thus, the best path from E to L passes through K and has a cost-to-go of 2.5
(i.e., 1.8 + 0.7); the best path from F to L passes through K and has a cost-to-go of
1.6, and the best path from G to L passes through K and has a cost-to-go of 2.6. This
is all the information needed before the algorithm moves to the preceding time step
(k = 2), and computes the arc costs for points B, C, and D. Because of Bellman’s

48

4 Dynamic Programming

optimality principle, the optimal path from E, F, or G to L is not affected by the
choice at the previous time step, therefore the cost-to-go from B to L is the sum of
the arc cost from B to either E, F, G, and of the optimal cost from there to L: for
example, going from B to L passing through E costs 4.4, i.e., 1.9 (cost of B→E)
plus 2.5 (lowest cost of E→L). With similar reasoning, the entire graph of Fig. 4.3
is completed with the cost-to-go values Y (x, k):

Y (x, k) =

⎡

⎣

3 2.5 1.4
4.8 4.1 1.6 1.9
3.3 2.6 0.7

⎤

⎦

The corresponding optimal control matrix μ∗, which contains the control values

to be applied at each time step (column) and for each state (row) is the following:

⎡

⎣

μ∗(x, k) =

−0.05 −0.1 −0.05

+0.05 −0.05 −0.05
+0.05

0 +0.05

0

⎤

⎦

At this point, it is possible to choose the optimal path as the one that gives the
lowest total cost from A to L. Its value is J ∗(x0) = Y (x0, 1) = 4.8 and the optimal
policy from A to L, which is obtained by reading the values of μ∗(x, k) according
to the last box of Fig. 4.1, is:

u∗ = {+0.05, −0.05, −0.05, +0.05}

(which corresponds to the bold path in Fig. 4.3).

DP provides a numerical optimal solution, within the accuracy limits due to the
discretization of the candidate solutions. However, it is not applicable in real time,
for two important reasons:

1. the solution has to be calculated backward, therefore the entire driving cycle must

be known a priori, and

2. it is a procedure computationally heavy, requiring the backward solution of the

entire problem before being able to determine the ﬁrst control action.

However, dynamic programming provides the closest approximation to the optimal
solution of the energy management problem, and is often used to determine the
maximum potentiality of a given architecture, thus serving as a design tool or as a
benchmark for implementable control strategies [4–12].

DP implementation as described is a three-step process: determination of arc
costs, minimization of cost-to-go to determine the optimal control policy (proceed-
ing backward in time), and application of the optimal control policy to the system
(proceeding forward in time). While the latter step can be performed on a standard
simulator, the ﬁrst two steps require a speciﬁc coding able to separate clearly the def-
inition of the cost at each time from the integration of the dynamic state equations. In
other words, a non-dynamic representation of the cost function L k = L(xk, uk, wk)

4.3 Application of DP to the Energy Management Problem in HEVs

49

and the system function xk+1 = fk(xk, uk, wk) are needed, where the external
disturbance wk may represent the driving cycle, the road slope, etc. These func-
tions are then called by the DP algorithm to compute the cost-to-go starting from the
last point of the driving cycle, and to determine the optimal policy.

The reader is directed to [13, 14] for a detailed description of a general-purpose

DP algorithm that is made available for download [15].

In Chap. 4 we presented the DP as a numerical tool to solve the optimal control
problem for hybrid electric vehicles as deﬁned in Sect. 3.4. On the one hand, this
technique provides the optimal global solution to the problem; on the other hand,
the curse of dimensionality from which this algorithm suffers along with the need
of a backward discretized model do not make it appealing from a computational
and implementation standpoint [1, 2]. For, other optimal control methods have been
applied to solve this type of problem, among which Pontryagin’s minimum principle1
[1, 3, 5] is probably the one that has received the most attention in recent years.

Pontryagin’s minimum principle is in the form of a set of necessary conditions of
optimality. A control law u(t) that satisﬁes the conditions of the minimum principle
is called extremal. Being the conditions of the minimum principle only necessary,
the optimal solution, when one exists, must be an extremal control. Conversely, not
all extremal controls are optimal.

There are several formulations of the principle, depending on the way the optimal
control problem is speciﬁed [5]. The most relevant for the HEV energy management
problem is discussed in this chapter.2 In Sect. 5.2 the formulation of the principle
is given for the general case of a nth dimensional multi-input system, whereas in
Sect. 5.3 the principle is presented in detail for the case of HEV energy management.
The chapter closes with some remarks about the relationship between dynamic pro-
gramming and the minimum principle.

1The minimum principle was originally proposed (as maximum principle) by the Russian mathe-
matician Lev Semenovich Pontryagin and his students in 1958 and later described in a textbook
[3]. Some regard this theorem as the beginning of modern optimal control theory [4].
2The reader can refer to [5] for other PMP formulations.
The formulation of Pontryagin’s minimum principle used when solving Problem 3.2
deﬁned in Sect. 3.5 is the one related to the case including constraints on the system
states.

As discussed in Chap. 3, the state variables are constrained to remain within some
boundaries, in general time-varying: x(t) ∈ Ωx(t) ⊂ Rn ∀ t ∈ [t0, tf ]. Formally, the
state boundaries can be expressed by deﬁning the set of admissible states as those
for which the conditions G(x(t)) ≤ 0 are satisﬁed, i.e.:

Ωx(t) = {x ∈ Rn|G(x(t)) ≤ 0},

where the function G(x(t)) : Rn (cid:6)→ Rm represents a set of m inequalities that the
components of the state vector must satisfy.

For the Problem 3.2, the Hamiltonian function is deﬁned as

H (x(t), u(t), λ(t), t) = L (x(t), u(t), t) + λ(t)T · f (x(t), u(t), t)

(5.1)

where f (x(t), u(t), t) is the right-hand side of the system dynamic equation (3.9),
L (x(t), u(t), t) is the instantaneous cost in (3.13), and λ(t) a vector of optimization
variables, also known as adjoint states or co-states of the system. The co-state vector
λ(t) has the same dimension as the state vector x(t).

Pontryagin’s minimum principle states that if u∗(t) is the optimal control law for

Problem 3.2 then the following conditions are satisﬁed [5]:

1. the state and co-state must satisfy the following conditions:

(cid:3)
x∗(t), u∗(t), t

(cid:4)

= f

(cid:3)
x∗(t), u∗(t), λ∗(t), t

(cid:4)

= h

u∗(t)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
u∗(t)

∂H
∂x
(cid:3)
∂L
x∗(t), u∗(t), t
∂x

(cid:4)

− λ∗(t) ·

(cid:3)
x∗(t), u∗(t), t

(cid:6)
T

(cid:4)

(cid:5)

∂f
∂x

˙x∗(t) =

(cid:2)
(cid:2)
(cid:2)
(cid:2)

∂H
∂λ

˙λ∗(t) = −

= −

x∗(t0) = x0
x∗(tf ) = xtarget

(5.2)

(5.3)

(5.4)

(5.5)

2. for all t ∈ [t0, tf ], u∗(t) globally minimizes the Hamiltonian:

H(u(t), x∗(t), λ∗(t), t) ≥ H(u∗(t), x∗(t), λ∗(t), t), ∀ u(t) ∈ U(t), ∀ t ∈ [t0,

, tf ]

5.2 Minimum Principle for Problems with Constraints on the State

53

i.e., the optimal solution u∗(t) is such that

u∗(t) = arg min

(H(u(t), x(t), λ(t), t))

u(t)∈U(t)

(5.6)

where U(t) indicates the set of admissible control values at time t.

5.2.1 On the System State Boundaries

For the problem at hand, the constraints on the system state are both local and global.
Global constraints are guaranteed by ensuring that both (5.4) and (5.5) are satisﬁed.
Local constraints on the system states, to guarantee that the states of the system are
in the region Ωx(t) at each instant of time, can be enforced by introducing an extra
cost in the Hamiltonian that is activated whenever the state boundaries are reached
or violated.

Because of the constraints on the state variable, the formulation of the principle
depends on whether the state constraints are active (i.e., the state assumes a boundary
value) or not. In particular, the constraints on the states are violated when (from (3.14)
and (3.15)):

1 the state assumes values above its admissible upper limits:

2 or, the state assumes values below its admissible lower limits:

G1(x(t)) = x(t) − xmax > 0

G2(x(t)) = xmin − x(t) > 0

(5.7)

(5.8)

In order to introduce these constraints formally in the formulation of the principle,
the total time derivatives G(r) of G1 and G2 are used, up to the order r in which u(t)
appears explicitly for the ﬁrst time. For the problem dealt with in this book, the
control u(t) appears in the ﬁrst time derivative of G1 and G2, namely r = 1.

(cid:7)

G(1)(x(t), u(t), t) =

(1)
G
1
(1)
G
2

(x(t), u(t), t) = dG1
dt
(x(t), u(t), t) = dG2
dt

= ˙x(t) = f (x(t), u(t), t)
= −˙x(t) = −f (x(t), u(t), t)

(5.9)
Using (5.9), the new Hamiltonian function enforcing the local state constraints is

deﬁned as [5]:

H = L (x(t), u(t), t) + λ(t)T · f (x(t), u(t), t) + w(x)T · f (x(t), u(t), t)

(5.10)

54

where

5 Pontryagin’s Minimum Principle

⎧
⎪⎨

⎪⎩

w(x) =

if G (x(t)) < 0 (constraints not active)
0
−K if G1 (x(t)) ≥ 0 (upper constraints active)
if G2 (x(t)) ≥ 0 (lower constraints active)
K

(5.11)

w(x) has the same number of components as G(x(t)) and each component is deﬁned
on the basis of the corresponding component of G(x(t)). The value of the constant K
is arbitrary. A general rule is to make K high enough as to guarantee that the additional
cost due to meeting (or exceeding) a state constraint makes the corresponding solution
unacceptable.

The Hamiltonian function (5.10) can be rewritten as:

H = L (x(t), u(t), t) +

(cid:3)
λ(t)T + w(x)T

(cid:4)

· f (x(t), u(t), t)

(5.12)

Practically, the Hamiltonian function during the intervals in which the constraints
are active is augmented by the term w(x), called additive penalty function that
depends on the derivative of the constraint function. For constraints of the form
(5.7) or (5.8), the effect of this is that control candidates that tend to overcome the
state boundaries become penalized, while those of opposite sign are favored.

In light of the newly deﬁned Hamiltonian (5.12), the co-state equation (5.3) is

modiﬁed as follows:

˙λ∗(t) = −

∂L
∂x

(cid:3)
x∗(t), u∗(t), t

(cid:4)

−

(cid:3)
λ∗(t) + w(x)

(cid:4)

(cid:3)
x∗(t), u∗(t), t

.

(5.13)

(cid:6)
T

(cid:4)

(cid:5)

∂f
∂x

The inclusion of the additive penalty function introduces discontinuities in the
Hamiltonian function at the time instants in which the state boundaries are reached.
This translates into discontinuities in the value of the co-state λ(t) at those instants,
as can be inferred from (5.13).

5.2.2 Notes on the Minimum Principle

Pontryagin’s minimum principle is a rather powerful tool to solve ﬁnite horizon
optimization problems. It permits redeﬁning the global optimal control problem in
terms of local conditions expressed by the differential equations (5.2) and (5.13) and
by the instantaneous minimization (5.6). Clearly, the global nature of the problem
does not disappear, and remains evident in the fact that the boundary conditions
are given at the initial and ﬁnal time; therefore, the problem cannot be solved as a
standard dynamic evolution problem.

The necessary conditions given by the Pontryagin’s minimum principle can
be used to ﬁnd optimal control candidates, called extremal controls; Pontryagin’s
principle ensures that the optimal control, if it exists, must be an extremal control. If
the optimal control problem admits a solution, and there is only one extremal control,

5.2 Minimum Principle for Problems with Constraints on the State

55

then that is the optimal control solution. Even if several extremal controls are found,
it may be relatively easy to simply apply all of them one at a time and then identify
the optimal control as the extremal giving the lowest total cost.

A standard way of solving an optimal control problem using the minimum prin-
ciple is the so called shooting method3 which consists in applying an arbitrary initial
value (guess) of the co-state at the beginning of the simulation, λ0, then running the
dynamic problem deﬁned by (5.2) and (5.3) while solving the minimization (5.6) at
each time instant. At the end of the optimization horizon, the state and co-state will
reach a ﬁnal value which may not satisfy the terminal constraints. In this case, the
initial value of λ is changed and the entire problem is run again until a suitable initial
value λ∗

0 is found, which generates a solution meeting all the constraints.

5.3 Pontryagin’s Minimum Principle for the Energy

Management Problem in HEVs

The HEV optimal energy management problem is a scalar problem both in the
state and in the control, i.e., n = 1, p = 1. The state, SOC, must be between
two values, SOCmax and SOCmin. Thus the set of admissible states is: ΩSOC(t) =
[SOCmin, SOCmax]. The control, Pbatt(t), lives in the set of admissible control values
UPbatt

(t) = [Pbatt,min(t), Pbatt,max(t)].

The explicit dependence of the Hamiltonian on time t, in (5.1) or (5.10) translates
into a dependence on the power request from the driver, Preq. Hence, the Hamiltonian
function for the HEV energy management problem is:

H

(cid:3)
SOC(t), Pbatt(t), λ(t), Preq(t)
= ˙mf

Pbatt(t), Preq(t)

(cid:3)

(cid:4)

(cid:4)

+ (λ(t) + w(SOC)) · S ˙OC(t),

and the necessary conditions are:

P∗
batt

(t) = arg min

Pbatt (t)∈UPbatt

(cid:3)
Pbatt(t), SOC(t), λ(t), Preq(t)

(cid:4)

H

(cid:3)
˙λ∗(t) = −
λ∗(t) + w(SOC)

(SOC∗, P∗

) = h(SOC∗(t), P∗

(t), λ∗(t))

batt

batt

∗(t) = f (SOC∗(t), P∗

(t))

batt

˙SOC
(cid:4) ∂f
∂SOC

(5.14)

(5.15)

(5.16)

(5.17)

(5.18)
(5.19)

SOC∗(t0) = SOC0
SOC∗(tf ) = SOCtarget

3This approach is practical and reliable when the problem has a single state and the effect of the
co-state on the solution is easily understood; in that case, the shooting method can be implemented
with a simple iterative search, such as bisection, which converges in a relatively few steps.

56

5 Pontryagin’s Minimum Principle

Start

Increase initial 
co-state

Guess initial 
value of co-state
λ0

Solve the PMP 
conditions
over the optimization 
[t0, t f ]
horizon           . 

Evaluate
SOC(t f ) − SOCtarget

= 0

End

< 0

> 0

Decrease initial 
co-state

Fig. 5.1 Iterative mechanism to solve the Pontryagin’s minimum principle via shooting method

SOCmin ≤ SOC∗(t) ≤ SOCmax

(5.20)

Equations (5.16) and (5.17) represent a system of two ﬁrst-order differential
equations in the variables SOC and λ. Despite being completely deﬁned, this two-
point boundary value problem can be solved numerically only using an iterative
procedure, because one of the boundary conditions is deﬁned at the ﬁnal time,
SOC∗(tf ) = SOCtarget.

The solution of the PMP’s necessary conditions is obtained via shooting method

according to the scheme in Fig. 5.1.

Starting with an initial guess of λ0, at each iteration of the shooting method the
minimum principle conditions are solved throughout the length of the optimization
horizon, [t0, tf ], typically corresponding to the duration of a driving cycle. At the end
of the simulation, the obtained value of the SOC(tf ) is compared to the desired state of
charge, SOCtarget. Depending on the difference SOC(tf ) − SOCtarget, the value of λ0
is either adjusted and the simulation repeated, or the algorithm ends if the difference
reaches the desired target (i.e., it is close to zero within a pre-deﬁned tolerance). A
bisection procedure can be used to obtain convergence in few iterations, making the
minimum principle sensibly faster than dynamic programming.

The implementation of the PMP’s necessary conditions is shown in the schematic
of Fig. 5.2. At each instant of time over the optimization horizon [t0, tf ], given a
request of power, Preq, the Hamiltonian is built and minimized. This generates the
optimal control, P∗
(t) that is applied to the state and co-state dynamic block to
compute the state of charge and co-state variation at the next step.

batt

5.3 Pontryagin’s Minimum Principle for the Energy Management Problem in HEVs

57

Preq

Compute 
Hamiltonian

H

Find control value that gives minimum 
of Hamiltonian:

P∗
batt

H(Pbatt , SOC, λ , Preq)

P∗
batt

= arg min
Pbatt

H(Pbatt , SOC, λ , Preq)
∈UPbatt

Apply optimal control and 
compute state and co-state 
variation
∗ = f (SOC∗, P∗

˙SOC
˙λ ∗ = h(SOC∗, P∗
batt

)
batt
, λ ∗)

SOC∗

λ ∗

Fig. 5.2 Open-loop PMP-based energy management control scheme

It is interesting to notice that in the scalar co-state equation (5.17), the term

(SOC∗, P∗

batt

) can be expanded using (3.4), as follows:

∂f
∂SOC

∂f (SOC, Pbatt)
∂SOC

= −

= −

1
ηsign(I(t))
coul

1
ηsign(I(t))
coul

Qnom

(cid:5)

Qnom

∂I(Voc(SOC), R0(SOC), Pbatt)
∂SOC

(cid:6)

∂I
∂ Voc

∂ Voc
∂SOC

+

∂I
∂R0

∂R0
∂SOC

(5.21)

It is often the case that the Voc(SOC) and R0(SOC) characteristics of the battery
are such that their dependence on SOC (over the SOC range of operation) can be
neglected. This leads to

∂f
∂SOC

(SOC∗, P∗

batt

) ≈ 0

Thus, when the optimal control operates within the state boundaries the co-state
equation (5.17) can be approximated to ˙λ ≈ 0.

The implication of this fact is in that the PMP optimal solution of the HEV energy
management problem is characterized by a constant co-state λ. This constant, though,
is unknown when attempting to solve the problem and it can be found by means of
the shooting method, as mentioned earlier in this chapter.

The additive penalty function w(SOC) is the piecewise function shown in Fig. 5.3

and given by:

w(SOC) =

⎧
⎪⎨

⎪⎩

if
if

SOCmax < SOC < SOCmin
0
SOC < SOCmin
K
−K if SOC > SOCmax

(5.22)

The constant K is determined in simulation iteratively by trial-and-error to ensure
that the cost of using the battery becomes high whenever the SOC hits the lower
bound SOCmin and low whenever the SOC hits the upper bound SOCmax. When SOC
is within its maximum and minimum allowable bounds, the penalty function is not
active adding a zero term to the instantaneous cost.

58

5 Pontryagin’s Minimum Principle

Fig. 5.3 Piecewise-constant
penalty function w(SOC)

)

C
O
S
(

w

K

0

−K

SOC

min

SOC

SOC

max

5.3.1 Power-Based PMP Formulation

For a more immediate interpretation of the Hamiltonian and without any loss of gen-
erality,4 the PMP can be reformulated by using the electrochemical energy variation
Eech(t) as the system state instead of SOC, and the power equivalent to the fuel ﬂow
rate, Pfuel, as the instantaneous cost L in (3.13), instead of the fuel mass ﬂow rate
˙mf (t).

Let us ﬁrst deﬁne the battery electrochemical energy variation as the amount of
energy that is extracted from the battery during a given time interval [t0, t]. This is:

Eech(t) =

Pech(t)dt =

Voc(SOC)I(t)dt.

(5.23)

(cid:12)

t

t0

(cid:12)

t

t0

where Pech(t) is the battery electrochemical power, representing the power that
corresponds to the effective battery discharge/charge. In a charge-sustaining HEV,
the limited SOC sweep results in working at approximately constant potential,
i.e., Voc ≈ const = Voc,nom (nominal value of the open circuit voltage). Under this
assumption and using (2.33) and (5.23) can be expressed as follows:
(cid:12)

Eech(t) = Voc,nom

I(t)dt

t

t0

= Voc,nom · Qnom · ηcoul · (SOC(t0) − SOC(t)).

The power equivalent to the fuel ﬂow rate, on the other hand, is:

(5.24)

(5.25)

(5.26)

Pfuel(t) = Qlhv ˙mf (t).

4As well as for further developments in the next chapters.

5.3 Pontryagin’s Minimum Principle for the Energy Management Problem in HEVs

59

Taking the derivative with respect to time of (5.25) produces the state equation:

Pech(t) = ˙Eech(t) = − ˙SOC(t)Voc,nomQnomηcoul = Voc,nomI(t)

(5.27)

The Hamiltonian becomes

H = Pfuel(t) + λ(t) · Pech(t)

or

H = Pfuel(t) +

(cid:3)
λ(t) + w(SOC)

(cid:4)

· Pech(t)

(5.28)

(5.29)

to include state boundary constraints. Equation (5.28) can be interpreted as an equiva-
lent power where λ(t) represents a weighting factor that transforms the battery power
into fuel power. With this PMP formulation λ is an adimensional factor, as opposed
to the formulation given by (5.14) where λ carries the units of grams.

The co-state λ(t), using the new state variable Eech(t), evolves according to:

˙λ(t) = −

(cid:3)
= −

∂H
∂Eech

λ(t) + w(SOC)

(cid:4) ∂Pech
∂Eech

(5.30)

which, by virtue of (5.25) and (5.27), yields to the same co-state equation (5.17) used
in the original formulation.

The existence and uniqueness of the solution cannot be proved formally in the
general case, but it is reasonable to assume that at least one optimal solution exists
for the energy management problem, in the sense that there must necessarily be at
least one sequence of controls giving the lowest possible fuel consumption. If the
minimum principle generates only one extremal solution, that can be considered the
optimal solution; if there is more than one extremal solution, they are all compared
(i.e., the total cost resulting from the application of each is evaluated) and the one
yielding the lowest total cost is chosen. In [6] it is shown that under the assumption
of constant battery efﬁciency the PMP necessary conditions are also sufﬁcient.

Simulations results showing the PMP implementation are discussed at length in

Chap. 8.

A well-known fact about the PMP solution is the high sensitivity of optimality to
the initial co-state value [5, 7]. For, Figs. 5.4 and 5.5 show the SOC variation obtained
by using different initial values of the co-state. Increasing the absolute value of λ
results in a tendency to increase the SOC during the driving cycle, and vice-versa.
For each driving cycle, there exists one value of co-state for which the solution is
charge-sustaining, which is easily found iteratively thanks to the predictable behavior
visible in Fig. 5.5. A numerical example detailing the search procedure is discussed
in Sect. 8.2.4.

60

5 Pontryagin’s Minimum Principle

300

600

900

λ
0

 =

4.2

4.1

4.0

0

300

600

900

Fig. 5.4 Effect of initial
co-state value on SOC
evolution (simulation results
obtained from the case study
described in Sect. 8.2, cycle
Artemis Urban)

Fig. 5.5 Effect of initial
co-state value on ﬁnal SOC
value (simulation results
obtained from the case study
described in Sect. 8.2, cycle
Artemis Urban)

60

40

20

]
h
/
m
k
[
 
d
e
e
p
S
 
e
l
c
i
h
e
V

0

0

0.8

0.75

0.7

0.65

C
O
S

C
O
S
 
l
a
n
i
F

0.8

0.7

0.6

0.5

0.4

3

3.5

4.5

5

4
λ
0

5.4 Co-State λ and Cost-to-Go Function

The aim of this section is to qualitatively discuss the relationship between the DP
method, presented in Chap. 4, and the PMP solution discussed in this chapter. In order
to do that, we make use of the Hamilton–Jacobi–Bellman (HJB) equation which is a
partial differential equation central to optimal control theory. The interested reader
is referred to [1, 8, 9] for the mathematical formulation of HJB.

The solution of the HJB equation is the “value function,” which gives the opti-
mal cost-to-go for a given dynamical system with an associated cost function. The
corresponding discrete-time equation is the Bellman equation presented in Chap. 4.
From the theory of calculus of variations [8, 9], it is known that if the optimal
control problem is solved and the optimal value of the cost objective is known, J ∗,
then this deﬁnes the optimal trajectory from the initial state x0 to the ﬁnal state xf . For
simplicity, we limit our discussion to the case n = 1 and p = 1. Based on Bellman’s

5.4 Co-State λ and Cost-to-Go Function

61

]
J
k
[
 
o
g
−
o
t
−
t
s
o
C

10

5

0
0.8

0.7

0.6

SOC

12

10

8

6

4

2

0

0.5

0.4

0

1500

500

1000

Time [s]

Fig. 5.6 Example of cost-to-go J ∗(x, t) (in kJ) computed for the case study presented in Sect. 8.2,
and the optimal SOC trajectory superposed

principle of optimality [1], the HJB equation can be derived that states that, on the
optimal trajectory, the following holds true:

−

∂J ∗
∂t

= min
u(t)

(cid:5)
˙L(x, u) +

(cid:6)

∂J ∗
∂x

f (x, u)

Given (5.31), a connection can be made between the HJB and PMP along the opti-
mal trajectory. Providing the minimization problem is solved, i.e., the optimal cost
function J ∗(x) is found, then the optimal trajectory is obtained [10].

Evaluating the partial derivative of J ∗(x) with respect to x, along the optimal

trajectory x∗, gives:

(5.31)

(5.32)

λ∗(t) =

(cid:2)
(cid:2)
(cid:2)
(cid:2)

∂J ∗
∂x

x∗

Thus, supposing that the minimization problem is solved (e.g. by means of DP)
and that J ∗(x) is known, this deﬁnes the optimal trajectory in terms of state x∗(t) and
also in terms of co-state λ∗(t).

As an example of application of such considerations to the HEV case (as ﬁrst
proposed in [10]), Fig. 5.6 shows results obtained from the DP solution of the prob-
lem. The cost-to-go map obtained from DP is shown, as well as the optimal SOC
trajectory. The co-state computed numerically using (5.32) is shown in Fig. 5.7 for
the entire domain. Figure 5.8 shows sections of the surface for several time values,
in order to show the clear trend of the co-state variation with respect to the system
state (SOC is shown here).

62

5 Pontryagin’s Minimum Principle

 

2.85

2.8

2.75

2.7

2.65

2.6

2.55

2.5

2.45

2.4

2.35

3

λ

2.5

2
0.8

 

0.7

0.6

SOC

0.5

0.4

0

1500

1000

500

Time [s]

Fig. 5.7 Co-state λ(x, t) computed for the problem deﬁned in Sect. 8.2, obtained by applying (5.32)
to the cost-to-go J ∗(x, t) shown in Fig. 5.6

Fig. 5.8 Same surface as in
Fig. 5.7, shown here in the
plane (SOC, λ) for several
values of time, randomly
chosen, in order to show the
correlation between λ and
SOC

λ

2.9

2.8

2.7

2.6

2.5

2.4

0.4

0.45

0.5

0.55

0.6

0.65

0.7

0.75

SOC

The optimal trajectory state and co-state is shown in Fig. 5.9, which also includes
the values computed using PMP (with the approximation of constant co-state, whose
value is chosen with the shooting method). It is apparent how the co-state value
computed from DP is indeed approximately constant and matches well the constant
value obtained from PMP; the optimal SOC trajectories computed with the two
methods are also comparable. The small differences in the behavior of SOC and λ
in the two cases are due to numerical discretization effects.

This illustrates the equivalence of DP and PMP and the use of PMP to generate

an optimal solution even off-line, by searching for the optimal co-state.
The Equivalent Consumption Minimization Strategy (ECMS) is a heuristic method
to address the optimal control problem deﬁned in earlier chapters, and has been
shown to provide an effective solution to the HEV energy management problem.
Although chronologically the ECMS solution pre-dates the material presented in ear-
lier chapters, we choose to introduce it at this stage because of the strong connection
between ECMS and formal optimal control solutions, which will become obvious
very quickly. ECMS was initially introduced by Paganelli [1] in 1999 as a method
to reduce the global minimization problem deﬁned in Sect. 3.4.1 to an instantaneous
minimization problem to be solved at each instant only using arguments based on
actual energy ﬂow in the powertrain.

Recent developments in the ﬁeld of energy management in HEVs have shown
that Pontryagin’s minimum principle conditions presented in Chap. 5 are intrinsically
equivalent to the ECMS method. The analysis of this equivalence is discussed in the
last section of this chapter.

6.2 ECMS-Based Supervisory Control

The ECMS is based on the notion that, in charge-sustaining hybrid electric vehicles,
the difference between the initial and ﬁnal state of charge of the battery is very small,
negligible with respect to the total energy used. This means that the electrical energy
storage system is used only as an energy buffer: ultimately all energy comes from
fuel, and the battery can be seen as an auxiliary, reversible fuel tank. Any stored
electrical energy used during a battery discharge phase must be replenished at a later
stage using fuel from the engine, or through regenerative braking.

Two cases are possible at a given operating point:

1. the battery power is positive (discharge case) at the present time; this implies
that at some future time the battery will need to be recharged, resulting in some
additional fuel consumption in the future. How much fuel will be required to
replenish the battery to its desired energy state depends on two factors: (1) the
operating condition of the engine at the time the battery is recharged; and (2) the
amount of energy that can be recovered by regenerative braking. Both factors are
in turn dependent on the vehicle load, and therefore on the driving cycle.

2. the battery power is negative (charge case): the stored electrical energy will be
used to alleviate the engine load required to meet the vehicle road load, implying
an instantaneous fuel saving. Again, the use of electrical energy as a substitute
for fuel energy depends on the load imposed by the driving cycle.

The principle underlying the ECMS approach is that a cost is assigned to the
electrical energy, so that the use of electrical stored energy is made equivalent to
using (or saving) a certain quantity of fuel. This cost is obviously unknown, as it
depends on future vehicle behavior, but it has been shown that the cost can be related
to driving conditions in a broad sense (for example, urban versus highway driving).
The concept implemented by the ECMS is illustrated in Fig. 6.1, which refers to
a parallel HEV (but the concept can be applied to a series HEV—the only difference
is the location of the power summation node).

In the discharge case (Fig. 6.1a), the electric motor provides mechanical power.
The dotted route is related to the future return of the used electrical energy. Of
course, the operating point of this recharge cannot be known a priori, and thus an
approximate mean efﬁciency should be set. In the charge case (Fig. 6.1b), the electric
motor receives mechanical energy and converts it into electrical energy stored in the

(a)

Virtual fuel 
consumption due to 
need for future 
battery recharge

(b)

Virtual fuel saving 
thanks  to future 
battery use

Fuel 
Tank

Fuel 
consumption

Fuel 
Tank

Fuel 
consumption

Engine

Engine

Engine

Engine

chain for 
battery 
recharge

Vehicle

chain for 
battery 
discharge

Vehicle

Electric 
machine(s)

Electric 
machine(s)

Electric 
machine(s)

Electric 
machine(s)

Battery

Battery 
discharge

Battery

Battery 
recharge

Fig. 6.1 Energy path during discharge (a) and charge (b) in a parallel HEV [2]. Practically, when
implementing the ECMS we account for the use of stored electrical energy, in units of chemical
fuel use (g/s), such that an equivalent fuel consumption taking into account the cost of electricity
can be deﬁned

6.2 ECMS-Based Supervisory Control

67

battery. The dotted route is related to the future use of this electrical energy to produce
mechanical power. This amount of mechanical energy will not have to be produced
by the engine and is considered as a fuel saving. In this case, the equivalent fuel ﬂow
of the electric motor is negative.

The key idea of ECMS is that in both charge and discharge, an equivalent fuel
consumption can be associated with the use of electrical energy [3]; the equivalent
future (or past) fuel consumption, ˙mress(t) (g/s), can be summed to the present real fuel
consumption—fuel mass ﬂow rate ˙mf (t) (g/s)—to obtain the instantaneous equivalent
fuel consumption, ˙mf ,eqv(t):

˙mf ,eqv(t) = ˙mf (t) + ˙mress(t).

(6.1)

By analogy to an engine which consumes real fuel and for which the instantaneous

fuel consumption is given as

˙mf (t) = Peng(t)
ηeng(t)Qlhv

,

where Qlhv (MJ/kg) is the fuel lower heating value (energy content per unit of mass),
ηeng(t) is the engine efﬁciency, and Peng(t) is the power produced by the engine when
it operates at a certain efﬁciency, the electric machine consumes virtual fuel

˙mress(t) = sfceq(t) · Pbatt(t).

The virtual fuel consumption can be evaluated by use of a virtual speciﬁc fuel
consumption, sfceq(t) (g/kWh). The virtual speciﬁc fuel consumption is proportional
to an equivalence factor s(t) which differs whether the battery is being charged or
discharged:

˙mress(t) = s(t)
Qlhv

Pbatt(t).

The equivalence factor s(t) is a vector of values, one for charge and one for
discharge, s(t) = [schg(t), sdis(t)]. Its task is to assign a cost to the use of electricity,
converting electrical power into equivalent fuel consumption.

Practically speaking, the equivalence factor s(t) represents the chain of efﬁciencies
through which fuel is transformed into electrical power and vice-versa. As such, it
changes for each operating condition of the powertrain. In the original formulation
of ECMS, the equivalence factor is a constant, or rather a set of constants which can
be interpreted as the average overall efﬁciency of the electric path (for each operating
mode, e.g., charge or discharge) for a speciﬁc driving cycle.

Depending on the sign of Pbatt (i.e., on whether the battery is charged or dis-
charged), the virtual fuel ﬂow rate can be either positive or negative, thus making the
equivalent fuel consumption (6.1) higher or lower than the actual fuel consumption.

68

6 Equivalent Consumption Minimization Strategy

Power demand 
and powertrain 
state

range of 
admissible 
control values

Calculate the 
equivalent fuel 
consumption

Choose the 
optimal control 
value

Fig. 6.2 ECMS algorithm ﬂow

As proposed in [4], by using ECMS the global problem of minimizing the total

cost is reduced to the local (instantaneous) problem of minimizing ˙mf ,eqv(t):

Global =

Local =

(cid:3)

tf
t0

˙mf (t)dt
minPbatt(t)∈UPbatt
SOCmin ≤ SOC ≤ SOCmax
⇓

(cid:2)

(cid:2) (cid:3)

minPbatt(t)∈UPbatt

tf
t0
SOCmin ≤ SOC ≤ SOCmax

˙mf ,eqv(t)dt

(6.2)

At each time, the equivalent fuel consumption is calculated using (6.1) for several
candidate values of the control variable Pbatt; the value that gives the lowest equivalent
fuel consumption is selected.

The following steps must be executed to implement ECMS, as also illustrated in

Fig. 6.2:
1. Given the state of the system in terms of Preq, ωeng, ωem, SOC, . . . , identify
the acceptable range of control [Pbatt,min(t), . . . , Pbatt,max(t)] which satisﬁes the
instantaneous constraints (power, torque, current limits);

2. Discretize the interval [Pbatt,min(t), . . . , Pbatt,max(t)] into a ﬁnite number of control

candidates;

candidate;

3. Calculate the equivalent fuel consumption ˙mf ,eqv(t) corresponding to each control

4. Select the control value Pbatt(t) that minimizes ˙mf ,eqv(t).

Steps 1 to 4 are computed at each instant of time over the entire duration of the
driving cycle.

This approach has been shown to closely approximate the global optimal solution.
In addition, the instantaneous minimization problem is computationally less demand-
ing than the global problem solved with dynamic programming, and applicable to
real-world situations since it does not rely (explicitly) on information about future
driving conditions.

A constant value of the equivalence factor in charge, schg, and in discharge, sdis,
must be selected beforehand. In practice, given a value of s(t), one can pre-compute
the combination of electric machine and engine power (or torque) that can meet
the vehicle power (or torque) demand with minimum instantaneous equivalent fuel
consumption.

The values of the equivalence factors affect the vehicle fuel consumption and the
trend of the battery state of charge. The selection of the most suitable values of schg

6.2 ECMS-Based Supervisory Control

69

Δ SOC

Fuel consumption (normalized)

s
i
d

s

3.9

4.5

4.3

3.7

3.5

3.3

0
.
0

2

−

0
.
1

4.1

−

0
.
2

−

0
.
0

2

2
.
0
−

−
0
.
0
2

−
0
.
1

3.9
s
chg

4.5

1
.
6

1
.
5

4.3

1
.
4

1
.
3

1
.
2

1.1

s
i
d

s

3.9

4.1

3.7

3.5

3.3

1
.
8

1.7

1.9

1.8

1

.

7

1.6

1

.

5

1

.

4

1
.
6

5
.
1

3
.
1

2
.
1

1
.
1

1
0
.
1

4
.
1

3.9
s
chg

3.3

3.5

3.7

4.1

4.3

4.5

3.3

3.5

3.7

4.1

4.3

4.5

Fig. 6.3 Effect of charge and discharge equivalence factors on SOC variation and fuel consumption
(normalized with respect to minimum value). The shaded area in the fuel consumption plot corre-
sponds to charge-sustaining solutions, where |ΔSOC| < 0.02 at the end of the cycle. Simulation
results obtained for the case study of Sect. 8.2, cycle Artemis Urban

and sdis for any given driving conditions to guarantee optimality is the challenge with
ECMS.

Clearly, the concept of equivalent fuel consumption is tied with the necessity
of attributing a meaningful value to the equivalence parameter. This parameter is
representative of past, present, and future efﬁciency of the engine and the RESS, and
its value affects both the charge sustainability and the effectiveness of the strategy:
if it is too high, an excessive cost is attributed to the use of electrical energy and
therefore the full hybridization potential is not realized; if it is too low, the opposite
happens and the RESS is depleted too soon (loss of charge sustainability).

The effect of charge and discharge equivalence factors on SOC variation and fuel

consumption is shown with a numerical example in Fig. 6.3.

Penalty Function for State Constraints and Charge Sustainability

When implementing the ECMS, a penalty function is often used to guarantee that the
SOC does not exceed the admissible limits, SOCmax ≤ SOC ≤ SOCmin. Because of
that, (6.1) is modiﬁed by using an appropriately constructed multiplicative penalty
function, p(SOC), as follows

˙mf ,eqv(t) = ˙mf (t) + s(t)
Qlhv

· Pbatt(t) · p(SOC).

(6.3)

The multiplicative penalty function used in the instantaneous equivalent cost and
shown in Fig. 6.4 is a correction function that takes into account the deviation of the
current SOC(t) from the target state of charge, SOCtarget, according to the following
expression

70

6 Equivalent Consumption Minimization Strategy

Fig. 6.4 Multiplicative
penalty function used in the
ECMS to correct for SOC
deviation shown for different
values of the exponent a. The
penalty function plays a
critical role to achieve a
reliable online estimation of
the battery state-of-charge

)

C
O
S
(
p

1

a=1
a=3
a=5

SOC

min

SOC

target

SOC

max

p(SOC) = 1 −

(cid:4)

SOC(t) − SOCtarget
(SOCmax − SOCmin)/2

(cid:5)
a

.

(6.4)

The penalty function assumes unitary value if the SOC is at the target value
SOCtarget, but its value changes (higher or lower) to properly compensate for the
deviation from the condition SOCtarget. In fact, p(SOC) < 1 when SOC > SOCtarget,
which means that a lower cost is attributed to the battery energy, thus making the
discharge more likely when the SOC is above the reference value. On the other hand,
p(SOC) > 1 when SOC < SOCtarget: in this condition, the cost of battery energy is
increased to make its discharge less likely.

It has been shown [5–7] that results comparable to those achieved with dynamic
programming are obtained by using two values of the equivalence factor s, one for
charging (schg) and the other for discharging (sdis), each of them constant during a
driving cycle. These values are different for different driving cycles and must be
obtained with a numerical optimization procedure, which is possible if the driving
cycle is known a priori. Therefore, in ideal conditions (simulation of a known cycle),
the results obtained by implementing the ECMS are very close to optimal. However,
since the strategy is very sensitive to these parameters, the control works well only
on driving cycles very similar to those in which they were obtained. This means
that, despite its “instantaneous” formulation, ECMS still implicitly relies on some
information about future driving conditions. If this information is wrong, i.e., if the
vehicle is driven on a driving cycle appreciably different than the one for which the
strategy was tuned, the control still works, but the results are not as good as they
could potentially be.

6.3 Equivalence Between Pontryagin’s Minimum Principle and ECMS

71

6.3 Equivalence Between Pontryagin’s Minimum

Principle and ECMS

The concepts behind ECMS originated from engineering intuition. However, an
analytical derivation of the equivalent fuel consumption can be obtained using Pon-
tryagin’s minimum principle. In the power-based PMP formulation (Sect. 5.3.1), the
Hamiltonian is

H = Pfuel(t) + λ(t) · Pech(t).

If we rewrite (6.1) (or (6.3)) in the ECMS in the form of power, multiplying all

terms by Qlhv, the instantaneous cost becomes

Peqv(t) = Pfuel(t) + s(t) · Pbatt(t).

The similarity between (6.5) and (6.6) is clear, showing how the Hamiltonian H
of the optimization problem can be regarded as an equivalent fuel consumption, or
better, as an equivalent fuel power, where λ(t) is a weighting factor that transforms
the battery power into fuel power.

The battery power Pbatt appearing in (6.6) indicates the net electrical power as
seen at the battery terminals, while Pech in (6.5) represents the electrochemical power,
i.e., the power correlated to the effective SOC variation. If one assumes that the
relation between this quantity and the electrical power can be represented as a battery
charge/discharge efﬁciency ηbatt, then:

(cid:6)

Pech(SOC(t), Pbatt(t)) =

Pbatt(t)
ηbatt(SOC,Pbatt)
ηbatt(SOC, Pbatt)Pbatt(t)

if Pbatt(t) ≥ 0 (discharge)
if Pbatt(t) < 0 (charge).

(6.7)
Therefore, the parallel between the Hamiltonian (6.5) and the ECMS instanta-
neous cost (6.6) is complete if the equivalence factors in (6.6) are linked to the
co-state λ(t) as follows [8]:

from which the following should also hold true:

schg(t) = λ(t)ηbatt,

sdis(t) =

λ(t)
ηbatt

,

schg(t) = η2

battsdis(t).

(6.5)

(6.6)

(6.8)

(6.9)

(6.10)

Thanks to the formalization based on PMP, there is no need for multiple
equivalence factors, since the efﬁciency differences among operating conditions are
implicitly taken into account in the evaluation of the quantity Pech. The equivalent
instantaneous fuel consumption provided by (6.5) can be used online as well as

72

6 Equivalent Consumption Minimization Strategy

Fig. 6.5 Effect of λ0 on
overall SOC variation
ΔSOC =
SOC(tf ) − SOC(t0), for
several driving cycles.
Simulation results are based
on the case study of Sect. 8.2,
with the hypothesis of
constant co-state

0.1

0.05

0

−0.05

−0.1

−0.15

−0.2

−0.25

C
O
S
Δ

Artemis Urb.
US06
NEDC

−0.3

2.5

3

3.5
λ
0

4

4.5

ofﬂine. In ofﬂine implementation, the optimal value of λ is found by iterative search
(shooting method) as the one that satisﬁes all constraints. The iterative search is
possible thanks to the fact that there is a direct and bi-univocal relation between the
value of the co-state and the value of state of charge reached at the time tf (as shown
in Fig. 6.5).

In online implementation, where λ0 is not known a priori, its value is adapted
online to optimize the behavior based on available measurements. This is the subject
discussed in the next chapter.

6.4 Correction of Fuel Consumption to Account

for SOC Variation

The concept of equivalence between battery energy and fuel is also useful for the
analysis of HEV fuel consumption. In fact, in practical implementations, the ﬁnal
SOC may not reach exactly the target value: therefore, in order to fairly compare fuel
consumption results, it is customary to correct the actual fuel consumption value
by accounting for the net amount of energy variation in the battery, i.e., always
reconducing the results to a perfect charge-sustaining case. The rationale for this
is easily seen in Fig. 6.6, which shows the total fuel consumption for three driving
cycles, as a function of the SOC variation from beginning to end of the cycle.

A linear correlation between ﬁnal SOC and fuel consumption is visible, which is

easily approximated by the linear expression:

mf ≈ mf ,0 + σ ΔSOC

(6.11)

where mf is the actual fuel consumption, mf ,0 is the value that would correspond to
a zero SOC variation, and σ is a curve ﬁtting coefﬁcient that translates ΔSOC into
a corresponding amount of fuel.

6.4 Correction of Fuel Consumption to Account for SOC Variation

73

Fig. 6.6 Effect of ﬁnal SOC
on total fuel consumption,
for the driving cycles of
Fig. 6.5

Artemis Urb.
US06
NEDC

1.2

1

0.8

0.6

0.4

]
g
k
[
 
.
s
n
o
c
 
l
e
u
F

0.2
−0.3

−0.2

−0.1
ΔSOC

0

0.1

Based on this evidence, the correction of fuel consumption can be performed by
adding to the actual fuel consumption a term that depends on SOC variation, to obtain
the charge-sustaining fuel consumption:

mf ,0 = mf − σ ΔSOC.

(6.12)

The physical meaning of σ is similar to that of the ECMS equivalence factors
or the PMP co-state, especially if (6.11) is written in terms of fuel energy, Ef , and
battery energy, Eech, rather than fuel consumption and SOC variation:

Ef = Qlhvmf ≈ Ef ,0 + ¯σ ΔEech.

(6.13)

However, σ is applied to integral measurements (energy or fuel consumption),
while s or λ are weights applied to the instantaneous values of power. For this reason,
their values are, generally, different although comparable: for example, Table 6.1
compares the value of σ extracted by the curves in Fig. 6.5 and the value of λ0 found
with the bisection method for the same cycles.

Table 6.1 Factor σ computed by curve ﬁtting the linear region of the characteristics in Fig. 6.6,
compared with its adimensional value ¯σ obtained by expressing (6.11) in terms of energy, and to
the optimal value of λ computed with the bisection method for the same cycles
Cycle

[-]

¯σ = σ Qlhv
Ebatt

mf ,0 (kg)
0.349
1.069
0.679

Artemis Urb.
US 06
NEDC
The charge-sustaining fuel consumption, mf ,0, is also reported

3.65
3.63
3.55

σ (kg)
0.486
0.483
0.472

λ0 [-]
4.15
3.65
4.21

74

6 Equivalent Consumption Minimization Strategy

6.5 Historical Note: One of the First Examples of ECMS

Implementation

To provide an illustration of the practical application of ECMS, we brieﬂy describe
its implementation as part of one of the Advance Vehicle Technology Competitions,
FutureTruck 2000, co-sponsored by the U.S. Department of Energy and General
Motors. As part of the competition, a team of students and faculty demonstrated the
hybridization of a model-year 2000 Chevrolet Suburban SUV, shown in Fig. 6.7 at
the GM Desert Proving Grounds in Arizona, during the June 2000 competition. The
production powertrain of the truck was replaced by a double-shaft parallel hybrid
powertrain, shown schematically in Fig. 6.8, consisting of a 2.5 l CIDI engine (Fiat)
and electric motor (Siemens) giving a combined power of 155 kW (210 hp), and cou-
pled to the driveline by a 5-speed GM automatic transmission. Using a supervisory
controller implementing ECMS, the converted SUV achieved remarkable improve-
ments in fuel economy, while retaining most of the performance characteristics of
the original vehicle. The vehicle control system architecture was based on a super-
visory controller (ETAS ES-1000), which communicated the setpoints selected by
the ECMS strategy to the engine control unit (Bosch ECU), the electric drive (Ford-
Ecostar Traction Inverter Module, TIM), and the transmission controller (GM PCM).
In addition, a custom battery interface circuit was developed to communicate between
the battery management system and the supervisory controller. The energy storage
system consisted of lead acid cells (Hawker Genesis) connected into a 324 V, 8 kWh
battery pack.

Fig. 6.7 OSU FutureTruck
2000 at General Motors
Desert Proving Ground, June
2000

Fig. 6.8 Schematic of OSU
FutureTruck 2000 parallel
hybrid powertrain [4]

6.5 Historical Note: One of the First Examples of ECMS Implementation

75

Fig. 6.9 Optimal electric machine torque map, referenced to wheels [4]

To implement ECMS in a computationally achievable form [4, 9], the equivalence
factor s was assumed to be a constant and the equivalent fuel cost of the electric
machine was computed for the entire range of possible electric motor operating
points, on a grid. The IC engine chemical fuel cost was known from the engine
brake-speciﬁc fuel consumption map, and therefore it is possible to calculate the
combination of EM and ICE torques (referenced at the wheels) that would result in
the minimum instantaneous fuel consumption for that particular value of s. This is
done ofﬂine by computing all possible feasible solutions over a discrete grid, and
selecting the combination of torques that yields the lowest value of total fuel cost.
The map of Fig. 6.9 shows the optimal (minimum total fuel cost) torque contribution
at the wheels for the EM (a similar map is used for the engine). The process can
be repeated for different values of s, which could be representative, for example, of
city and highway driving. To ensure SOC sustenance, and to keep the SOC within
its target range, a penalty function as shown in Fig. 6.4 is used. For the FutureTruck
2000, the goal was to keep SOC between 60 and 80 %.

Figure 6.10 depicts a 22.36-miles, 46 min trip in real trafﬁc conditions, with a
mix of highway and city driving, conducted in the Columbus, OH area in August
2000. The vehicle was in a fully automated hybrid mode, embedding the supervisory
control scheme described above. The only inputs to the control system were the
positions of the accelerator and brake pedals. For this test, the engine was cold at the
start of the test and the battery pack was fully charged.

The vertical line in Fig. 6.10, around t = 950 s, represents the boundary between the
highway and the urban portions of the drive. This boundary was selected to approx-
imate the speed statistics of the standard urban and highway US driving schedules
in both portions. Actually, the highway section was driven at a speed slightly higher
than the standard US FHDS. It should be noted that except for the initial battery

76

6 Equivalent Consumption Minimization Strategy

Fig. 6.10 Experimental results: driving cycle (top); SOC proﬁle (bottom) [4]

transient, the SOC remains within the 60–80 % target range speciﬁed in the charge-
sustaining operational strategy. At the very beginning, the battery SOC is outside this
desired band (fully charged) and the control strategy automatically favors a greater
use of the electric machine until the SOC is within the target range.

The fuel economy ﬁgures for the trip were corrected to account for the SOC dif-
ferences between the start and end of the trip. The fuel economy on the highway
section was nearly 27 mi/gal (8.8 l/100 km), and 19.7 mi/gal (12 l/100 km) in the city
section. Overall fuel economy for the entire trip was 23.4 mi/gal (10.1 l/100 km).
Averaging the highway and urban sections of the cycle using the conventional
weights of 45 and 55 %, respectively, the overall fuel efﬁciency was computed to
be 23 mi/gal (10.3 l/100 km). When accounting for the density and heating value
difference between Diesel fuel and gasoline, the gasoline-equivalent average fuel
economy was 21.2 mi/gal (11.2 l/100 km). This is approximately 1.5 times the fuel
economy of the original Suburban with its 5.3 l gasoline engine. Overall tank-to-
wheels efﬁciency for the hybrid powertrain was just below 33 %.

The problem of designing a real-time implementable strategy to solve the energy
management problem in hybrid electric vehicles and achieve a close-to-optimal solu-
tion has been the subject of extensive research over the last decade. The optimal
control methods based on instantaneous minimization such as Pontryagin’s Min-
imum Principle and Equivalent Consumption Minimization Strategy, reviewed in
Chaps. 5 and 6 respectively, guarantee optimality as long as the driving cycle is per-
fectly known. The main challenge associated with PMP (or ECMS) is the selection
of the most suitable values of λ0 (or [sch sdis]) to guarantee optimality and charge-
sustainability for any given driving conditions.1

If perfect knowledge of the driving scenarios is not possible, PMP lends itself
to suboptimal online implementable solutions providing that the co-state is suitably
estimated as driving conditions change. The task of updating the co-state online as
driving scenarios vary is referred to as co-state adaptation and the general supervisory
controller is referred to as adaptive optimal supervisory controller.

Methods falling into this category have been indicated in the literature as Adaptive-

PMP (A-PMP) or Adaptive-ECMS (A-ECMS) strategies.2

In this chapter, after reviewing contributions in the open literature on A-ECMS
methods, we focus on and analyze methods that use a state-of-charge feedback-based
mechanism to perform the co-state adaptation.

1In virtue of the equivalence between the two strategies shown in Chap. 6, in the rest of the chapter,
we do not distinguish between ECMS and PMP, and we conduct the study of adaptive methods with
reference to the PMP—but the same considerations apply to ECMS.
2In some cases [1], PMP is used to indicate the ofﬂine implementation of the minimum principle
with the optimal co-state, and ECMS for its online implementation based on adaptation of λ.
Before the PMP-ECMS relationship was understood, the adaptive supervisory con-
trol methods proposed last decade were aimed at using the ECMS as an online
optimization strategy by properly updating the values of [sch sdis] dependently on
the driving mission. In particular, two main categories of adaptation techniques to
design A-ECMS can be identiﬁed:

– adaptation based on driving cycle prediction;
– adaptation based on driving pattern recognition.

After the equivalence between ECMS and PMP was formalized and a new inter-
pretation of the ECMS was given as the optimal solution computed with PMP (see
Sect. 6.3, [2] and [3, 4]), it was understood that only one parameter must be adapted
for online optimization, e.g., the co-state λ. Adaptive supervisory control approaches
that rely on the instantaneous minimization of the Hamiltonian and have λ(t) as the
single control parameter to adapt go under the name of A-PMP methods. The mech-
anism used to perform the parameter adaptation is categorized as:

– adaptation based exclusively on feedback from SOC.

Note: what follows is not meant to be an exhaustive review of contributions to the topic
of adaptive strategies. Only the seminal works on the subject have been reviewed.
Over the past few years, the rate of publications on this topic has exploded and it
would be impossible to mention them all.

7.2.1 Adaptation Based on Driving Cycle Prediction

The driving principle behind this class of methods is: when no information on future
driving conditions is available, optimal fuel economy cannot be guaranteed. Thus,
this family of algorithms aims at using any sort of estimation of future information to
feed the ECMS control module with the more suitable values of equivalence factors.
In the early methods, described in [5] (and [6–8]), a real-time energy management
strategy was proposed. It was obtained by adding to the ECMS module an on-the-ﬂy
algorithm for the estimation of the equivalence factors, where an online and periodic
recalculation and optimization of the equivalence factors sch and sdis was performed
according to estimation of the driving conditions.

The ECMS module is thus augmented with a device able to relate the control
parameter, s(t), to the current velocity proﬁle. Figure 7.1a shows the A-ECMS control
diagram: the identiﬁcation of the driving mission given by the Speed Predictor is
used as input to the Adaptor where the best value of the equivalence factor is found
based on receding-horizon optimization.

To improve the execution time, a simpliﬁcation was proposed for actual real-time
implementation [8], consisting in the use of one equivalence factor, for both charge
and discharge, thus introducing some approximation.

7.2 Review of Adaptive Supervisory Control Methods

81

(a)

(b)

Driver

Driver

Speed
Predictor

Speed

Adaptor 
(receding-horizon 
optimization)

s(t)

ECMS

Driving
pattern 
recognition

Speed

Adaptor 
(cycle database 
look-up)

s(t)

ECMS

HEV powertrain

HEV powertrain

Vehicle dynamics

Vehicle dynamics

Fig. 7.1 Control diagram of A-ECMS with online optimization as proposed in [5] (a), with driving
pattern recognition as proposed in [9] (b)

The performance of A-ECMS is slightly inferior to the standard ECMS tuned on
a perfectly known driving cycle, but in general the results are quite good, and, most
importantly, achievable in real-world application (if enough computational power is
available).

In [10], the A-ECMS method strategy is based on speed prediction. The equiva-
lence factor is estimated online based on a look-ahead horizon deﬁned in terms of
energy at the wheels, to determine at each instant the most likely behavior (charging
or discharging) in the near future .

In [11] instead, an adaptation scheme similar to [6] is presented which uses a pre-
dictive reference signal generator (pRSG) in combination with a SOC tracking-based
controller. The pRSG computes the desired battery SOC trajectory as a function of
vehicle position such that the recuperated energy is maximized despite the constraints
on the battery SOC. To compute the SOC reference trajectory, only the topographic
proﬁle of the future road segments and the corresponding average traveling speeds
must be known.

In [12], the authors use a Model Predictive Control (MPC)-based strategy and
utilize the information attainable from Intelligent Transportation Systems (ITS) to
establish a prediction-based real-time controller structure. A constant reference SOC
is considered, and A-ECMS implemented as in [6] is compared with a MPC-type

82

7 Adaptive Optimal Supervisory Control Methods

controller based on the prediction of future torque demand, showing very similar
performance of the two controllers.

7.2.2 Adaptation Based on Driving Pattern Recognition

In parallel to the development of adaptive supervisory control schemes based on
driving cycle prediction, an alternative adaptation scheme was being proposed
exploiting the fact that the equivalence factors are similar for cycles with similar
statistical properties.

In [13], a multi-mode driving control algorithm using driving pattern recogni-
tion is developed and applied to a parallel HEV. The multi-mode driving control was
deﬁned as the control strategy that switches a current driving control algorithm to the
algorithm optimized in a recognized driving pattern. In the study, six representative
driving patterns are selected, composed of three urban driving patterns, one express-
way driving pattern, and two suburban driving patterns. A total of 24 parameters
such as average cycle velocity, positive acceleration, kinetic energy, stop time/total
time, average acceleration, and average grade are chosen to characterize the driving
patterns.

In [14] and [9], an approach for A-ECMS based on driving pattern recognition
is presented to obtain better estimation of the equivalence factor in different driving
conditions. A pattern recognition algorithm is used to ﬁrst identify which kind of
driving conditions the vehicle is undergoing, and then to select the most appropriate
equivalence factors from a predeﬁned set. The optimal values of s for several cycle
typologies (city, highway, etc.) are precalculated and stored in memory (in the equiv-
alence factors database); during vehicle operation, the adaptation algorithm uses the
past and present driving conditions to determine the current cycle type, from which it
selects the appropriate equivalency factor. The control scheme is shown in Fig. 7.1b.
While the vehicle is running, a time window of past driving conditions is ana-
lyzed periodically and recognized as one of the representative driving patterns. This
operation is performed in the Driving pattern recognition block of Fig. 7.1b. The
Adaptor module then selects the more suitable values of s(t) from the equivalence
factor database given the recognized driving patterns, and the ECMS is executed
with the estimated value of s(t).

7.3 Adaptation Based on Feedback from SOC

Approaches developed to design adaptive optimal supervisory control methods based
on SOC feedback [15–17] are based on the idea to change dynamically the value of
the co-state at the present time (without using past driving information or attempt
to predict future driving behavior), in order to contrast the SOC variation and thus

7.3 Adaptation Based on Feedback from SOC

83

maintain its value around the target value. In all these methods, the SOC reference
is considered constant.3

Performing the adaptation using a single parameter rather than two has signiﬁcant

advantage in that it reduces the design and calibration complexity.

Conceptually, these approaches differ in that, while [15, 16] update the equiv-
alence factor at each time instant, [17] relies on the concept of charge-sustaining
horizon, imposing charge-sustainability over a ﬁnite time horizon. If, on one hand
these methods are easy to implement, robust (as they all rely on feedback from SOC)
and computationally cheap, on the other hand their performance relies on a suitable
tuning of the parameters used in the adaptation law.

In the next section, we analyze and compare the two main adaptive schemes based

on SOC feedback from [15] and [17].

7.3.1 Analysis and Comparison of A-PMP Methods

The online adaptation of the co-state through SOC feedback uses the difference
between the target state of charge, SOCtarget, and its instantaneous value, SOC(t).

In [15], an adaptation law based on a proportional-integral (PI) controller of the

type:

λ(t) = λ0 + kP

SOCtarget − SOC(t)

+ kI

(cid:3)

t

(cid:2)
SOCtarget − SOC(τ )

(cid:3)

dτ

(7.1)

(cid:2)

(cid:4)

0

was proposed. In (7.1), λ0 represents the initial value of λ at time t = 0, and kp and
kI are the proportional and integral gains of the adaptation law. The initialization of
this algorithm, i.e., the choice of λ0, is arbitrary, and it can be done by averaging
different optimal initial values obtained ofﬂine.

In the following, (7.1) is referred to as continuous A-PMP. In practice, in (7.1) the
integral action is added to the proportional one to guarantee better performance when
tracking a constant reference value, at the price of having three tuning parameters
(λ0, kP, kI ).

Equation (7.1) was conceived to be executed online. Such a mechanism, that is
adapting the equivalence factor at each time step based on the divergence of the SOC
from its target value, might not be always desirable, though. In fact, this continuous-
time adaptation would in principle prevent using the battery over its entire range
of SOC operation, as even a small deviation of the actual SOC from the constant
reference value will be corrected the next time instant.

In order to allow the battery to span over a wider range of SOC, in [17], the fol-
lowing discrete time adaptation law (hereafter called discrete A-PMP) was proposed:

3Extensions have been proposed for plug-in HEVs, where the reference SOC is varied during the
cycle to allow battery discharge [1, 18, 19].

84

7 Adaptive Optimal Supervisory Control Methods

SOCtarget

Compute and minimize Hamiltonian

Apply control and compute 
state variation

SOC(t)

P∗
batt

˙SOC = f (Pbatt , SOC)

SOCtarget

Adaptation 
algorithm

λ

P∗
batt

= arg min
Pbatt

H(Pbatt , SOC, λ , Preq)
∈UPbatt

Fig. 7.2 Adaptive optimal control strategy scheme based on SOC feedback. The adaptation algo-
rithm issues the adapted co-state λ according to either (7.1) or (7.2)

λ(k) =

λ(k − 1) + λ(k − 2)
2

(cid:2)
SOCtarget − SOC(k)

(cid:3)

+ kd
P

(7.2)

where k is an integer number indicating the kth ﬁxed time interval of length T seconds,
λ(k) is the value of the co-state in the interval [(k − 1)T , kT ], and SOC(k) is the
value of SOC at the beginning of said interval. The concept behind (7.2) is that the
charge-sustainability should be enforced over intervals of signiﬁcant length (several
seconds to minutes, according to battery capacity and driving cycle dynamics), thus
the correction of equivalence factor should be performed only at discrete intervals
and not continuously. The presence of the two previous values of λ is justiﬁed by the
desire to stabilize the output. Equation (7.2) is in the form of autoregressive moving-
average (ARMA) model, with two autoregressive terms and one moving average
term. As mentioned, the key feature of (7.2) is that the adaptation takes place at
regular intervals of duration T , rather than at each time instant, to allow for large
excursion of SOC as opposed to a quasi-constant SOC trend obtained when using
(7.1). While (7.2) is purely time-based, the same principle can be applied in the form
of an event-based strategy, letting the adaptation take place when a certain event
happens (e.g., a threshold value of SOC or speed is reached).

Regardless of how the adaption is performed (whether (7.1) or (7.2) is used), the

A-PMP scheme is structured according to the feedback scheme of Fig. 7.2.

7.3.2 Calibration of Adaptive Strategies

The feedback parameters kP and kI of (7.1) must be tuned in order to ensure conver-
gence of the SOC to the reference value. As for any PI controller, higher gains make
the adaptation faster but potentially unstable, and the proportional and integral con-
tribution must be suitable balanced. As an example, Fig. 7.3 shows the effect of the
two gains kP and kI on the SOC and λ behavior, using simulation results obtained with
the parallel hybrid vehicle model described in Sect. 8.2. In particular, the plots on the
left-hand side show the solution as the proportional gain kP varies while keeping the
integral gain at zero, and the plots on the right-hand side show the effect of kI when
kP is kept constant. Note how increasing kP is not sufﬁcient to generate a solution

7.3 Adaptation Based on Feedback from SOC

85

C
O
S

0.8

0.7

0.6

0.5

0.4

5

4

3

2

1

C
O
S

0.8

0.7

0.6

0.5

0.4

5

4

3

2

1

]
h
/
m
k
[
 

h
e
v

v

60

50

40

30

20

10

0

0

λ

λ

=4, k
k
=0
P
I
=6, k
k
=0
I
P
=8, k
k
=0
I
P

=4, k
k
=0
P
I
=4, k
k
=0.1
I
P
=4, k
k
=0.2
I
P

0

300

600

900

0

300

600

900

Time [s]

Time [s]

Fig. 7.3 Results obtained applying the continuous A-PMP for the cycle of Fig. 7.4 (vehicle model
and characteristics as in Sect. 8.2). The co-state is adapted at each instant by using (7.1). The plots
on the left shows the effect of the proportional gain kP, those on the right the effect of the integral
gain kI

Fig. 7.4 Artemis Urban
driving cycle

300

600

900

Time [s]

that converges to the reference value, but adding the contribution of kI immediately
helps in this respect (although an excessive integral gain generates oscillations).

Similar considerations can be observed for the discrete adaptation method (7.2).
P and of the adaptation interval T on the SOC

Figure 7.5 shows the effect of the gain kd
and λ behavior.

Although the SOC behavior differs signiﬁcantly, the overall fuel consumption is
generally not affected as much (when accounting for the SOC variation using (6.12)),
as long as the SOC boundaries are not reached: when they are, on the other hand,
the battery cannot be used and this may be detrimental to the overall efﬁciency (for
example, by preventing braking energy to be recuperated). Table 7.1 shows the SOC
variation and corrected fuel consumption for each adaptive strategy and combination
of calibration parameters.

86

7 Adaptive Optimal Supervisory Control Methods

C
O
S

0.8

0.7

0.6

0.5

0.4

7

6

5

4

3

 
0

C
O
S

0.8

0.7

0.6

0.5

0.4

7

6

5

4

3

 
0

ΔSOC

kI

0.1

0.2

m f /m

∗
f

kI

0

0.1

0.2

d=2, T=30 s
k
P
d=4, T=30 s
k
P
d=8, T=30 s
k
P

d=4, T=15 s
k
P
d=4, T=30 s
k
P
d=4, T=60 s
k
P

λ

λ

 

 

300

600

900

300

600

900

Time [s]

Time [s]

Fig. 7.5 Results obtained applying the discrete A-PMP. The co-state is adapted at each instant by
using (7.2). The ﬁgure shows the effect of the gain kd
P (plots on the left), and of the update interval
T (plots on the right)

Table 7.1 Effect of calibration parameters on continuous and discrete A-PMP (Cycle Artemis
Urban)

(a) Continuous A-PMP

(b) Discrete A-PMP

4

8

ΔSOC

kd
P

4

8

0

–0.244

–0.167

–0.125

15 s

0.044

–0.028

0.051

0.007

0.007

0.007

T

30 s

0.093

0.025

–0.002

-0.006

0.000

-0.001

60 s

0.034

0.093

0.016

4

1.00

1.01

1.01

8

1.00

1.01

1.00

m f /m

∗
f

15 s

1.02

T

30 s

1.04

60 s

1.05

kd
P

4

1.02

1.03

1.03

8

1.04

1.01

1.02

The values shown are the total SOC variation and the fuel consumption, normalized with respect
to the optimal value obtained with PMP

kP

6

kP

6

1.00

1.01

1.01

2

2

Two case studies are used to illustrate the concepts of modeling and control introduced
in the book: a parallel hybrid vehicle (Sect. 8.2) and a power-split vehicle (Sect. 8.3).
Details about the powertrain modeling, the deﬁnition of energy management prob-
lem, and the implementation of energy management strategies are provided for each
case study. The vehicle itself is the same for both cases and its main characteristics
are shown in Table 8.1.

8.2 Parallel Architecture

8.2.1 Powertrain Model

The ﬁrst example of hybrid powertrain is the parallel architecture depicted in Fig. 8.1.
The internal combustion engine and the electric motor are mechanically connected
through a splitter box, in which their respective torque outputs are summed. A con-
ventional 5-speed gearbox (GB) is present between the engine/motor and the wheels.
A clutch is present to disconnect the engine from the gearbox input shaft during gear
shift, and to allow electric-only driving. In the simulation model, the clutch is mod-
eled as an ideal on/off component, neglecting the slipping phases, and the shifting
operation is considered instantaneous. This is a full hybrid vehicle according to
the categorization of Fig. 1.1, as it includes engine-only mode, electric-only mode,
regenerative braking, and engine assist capabilities.

The kinematic chain composed of the gearbox and the differential/ﬁnal drive (FD)
introduces two gear ratios: the transmission ratio gtr (itr ), which is a function of the
Table 8.1 Vehicle
parameters for the case
studies [1, 2]

8 Case Studies

Frontal area, A f
Drag coefﬁcient, Cd
Air density, ρair
Roll. resist. coeff, cr oll
Total vehicle mass, M
Wheel radius, Rwh
Final drive ratio, g f
Distance of CG from front
axle, a
Distance of CG from rear
axle, b
Distance of CG from ground,
hC G

2.33 m2
0.26
1.22 kg/m3
0.024
1370 kg
0.32 m
4.113
1.2 m

1.5 m

0.8 m

Fig. 8.1 Parallel HEV
architecture

GB

FD

Engine

Mot

Batt

selected gear itr , and the constant ﬁnal drive ratio gfd. Thus, the torque Tpwt that
reaches the wheels (see Sect. 2.4.4) is1

while the speed of the engine and motor is

Tpwt = gtr (itr ) · gfd ·

Teng + Tmot

(cid:2)

(cid:3)
,

ωeng = ωmot = vveh
Rwh

· gtr (itr ) · gfd,

(8.1)

(8.2)

where vveh is the vehicle speed and Rwh the wheel radius.

The torque curves and the efﬁciency maps of the engine and the electric motor

are shown in Figs. 8.2 and 8.3, respectively.

1The dependence on t will not be explicitly indicated in the equations included in this chapter, for
easier notation.

8.2 Parallel Architecture

Fig. 8.2 Engine efﬁciency
map (generic Diesel engine)

Fig. 8.3 Electric motor
efﬁciency map (elaboration
of data in [3])

Table 8.2 Battery parameters

91

0.4

9
0.3

8
0.3

0.37

0 . 3 3

0.25
0.1

Efficiency

0

.

3
6

0

.

4

0

.

3

9

0

0

.

.

3

7

3

8

0

.

3

6

0.4

0.3 9
0.3 8

0 . 3 7
0 . 3 6

0.39

0.38

0.37
0.36

0.33

0.25
0.1

2000

0.33
0.25
0.1

1000

3000
Speed [rpm]

4000

5000

0.85

0.85

0.75

0.92

2
9
.
0

0 . 7 5
0.85

0

.

7
5

0

.

7
5

0.92

0.95

0.92

0.95

0.85

0.92

0.95

0.92

0.95

0.85

0.92

0 . 9 2

0.85

0.92

2

0 . 9

0 . 8 5

0.85

0.85

0.85

0

1000

8 5
3000

2000
Speed [rpm]

4000

]

m
N

[
 
e
u
q
r
o
T

]

m
N

[
 
e
u
q
r
o
T

160

140

120

100

80

60

40

20

0

100

50

0

−50

−100

Nominal charge capacity,
Qnom
Max voltage Vmax
Energy capacity
Ebatt = Qnom Voc,nom
Coulomb efﬁciency, ηcoul
Max current (charge or
discharge) Imax
Max power (charge or
discharge) Pbatt,max

6.5 Ah = 23400 C

248 V
5.8 MJ = 1.6 kWh

0.95
130 A

31 kW

The battery is modeled using a zero-th order model, with SOC dynamics given
by (2.33) (or (2.37)). A Li-ion battery pack is considered, with the data of Table 8.2
and the characteristics of open circuit voltage Voc and internal resistance R0 shown
in Fig. 8.4.

92

Fig. 8.4 Battery
characteristics, referred to
the entire pack

8 Case Studies

Open−circuit voltage [V]

250

240

230

220

210

200

0.14

0.13

0.12

0

0.2

0.4

0.6

0.8

1

Internal resistance [Ohm]

0.11

0

0.2

0.6
0.4
State of Charge

0.8

1

8.2.2 Optimal Control Problem Solution

The objective is to minimize fuel consumption by sharing the total torque request
between the internal combustion engine and the electric motor, maintaining charge-
sustaining operation.

Cost function. The objective of minimization is the total fuel consumption, func-

tion of the engine torque Teng, and speed ωeng, expressed as total fuel energy:

J = Qlhv

˙m f (Teng, ωeng)dt =

Pfuel(Teng, ωeng)dt.

(8.3)

(cid:4)

t f

t0

(cid:4)

t f

t0

The engine speed ωeng is related to the vehicle speed vveh and the gearbox ratio gtr by
(8.2). The gearbox ratio can be part of the optimization problem, or it can be taken as
an external input. We consider the latter case, assuming that an independent transmis-
sion controller exists to select the gear based mainly on drivability considerations.
The vehicle speed is considered as an external input for the energy management
strategy, as is the total torque request Tpwt (or power request Pr eq ), which is gener-
ated by the driver via the accelerator pedal or by the speed controller in simulation,
according to the general control architecture shown in Fig. 3.2. From (8.1), if Tpwt
and the gear index itr are imposed, the gearbox input torque is determined as

Tgb = Teng + Tmot =

Tpwt
gtr (itr ) · gfd

.

(8.4)

8.2 Parallel Architecture

93

As discussed in Sect. 3.4, the standard degree of freedom for the optimization
problem is the battery power Pbatt . It is directly and bi-univocally related to the
motor torque, Tmot , because the motor speed is imposed by external inputs and the
motor efﬁciency only depends on torque and speed (neglecting temperature effects).
This allows using the motor torque as the control variable, which is more immediate
for this powertrain architecture: in fact, given the torque of the electric motor, the
engine torque is found by difference from Tgb:

Teng = Tgb − Tmot .

(8.5)

The fuel power (proportional to the fuel consumption) is computed using the map
in Fig. 8.2, so it is a function of engine speed and torque. Through (8.2) and (8.5), it
is computed as a function of vehicle speed, total torque request, and motor torque as

Pfuel = Qlhv ˙m f (Teng, ωeng) = Pfuel(Tgb, Tmot , vveh).

(8.6)

System dynamics. The system dynamic equation represents the evolution of the
battery state of charge as a function of the state itself and of the control input Tmot
(or Pbatt , for what said earlier). According to (2.37), the state of charge variation is

˙S OC = −

1
ηsign(I (t))
coul

Qnom

(cid:7)(cid:8)

⎡
⎣ Voc(SOC)
2R0(SOC)

−

(cid:9)
2

Voc(SOC)
2R0(SOC)

− Pbatt

R0(SOC)

⎤

⎦

with the battery parameters Voc(SOC) and R0(SOC) shown in Fig. 8.4.

It turns out it is more practical to use the electrochemical energy variation in place
of state of charge as state in this case. According to the formulation introduced in
Sect. 5.3.1:

Eech = Ebatt ·

(cid:2)
SOC(t0) − SOC(t)

(cid:3)

with Ebatt = Voc,nom Qnomηcoul; the system dynamic equation is

The battery power is

˙Eech = Pech = −Ebatt

˙S OC.

Pbatt = Pem,e(Tmot , ωmot ),

(8.7)

(8.8)

(8.9)

(8.10)

where Pem,e(Tmot , ωmot ) is the electrical power required by the electric machine to
produce the torque Tmot , at the speed ωmot (which is a function of the vehicle speed
via the gearbox ratio itr ). Therefore the state equation is a function only of SOC
and Pbatt , which in turn depends on the control input Tmot , and the external inputs
vveh, itr .

94

8 Case Studies

Control constraints. The value of engine and motor torque must remain within

their respective limitations:

Tmot,min(ωmot ) ≤ Tmot ≤ Tmot,max (ωmot ),

Tice,min(ωeng) ≤ Teng ≤ Tice,max (ωeng),

(8.11)

(8.12)

and, in addition, the motor power is saturated according to the minimum and maxi-
mum available electric power2:

Pbatt,min(SOC) ≤ Pmot,e ≤ Pbatt,max (SOC),

(8.13)

which is translated into an additional constraint on the control variable Tmot :

T (cid:3)
mot,min

(ωmot , Pbatt,min) ≤ Tmot ≤ T (cid:3)

mot,max

(ωmot , Pbatt,max )

(8.14)

PMP solution. Using the power-based formulation of Sect. 5.3.1, the Hamiltonian

of the system has the form:

H (Tmot ,Eech, Tgb, vveh)
= Pfuel

(cid:2)

(cid:3)

Tmot , Tgb, vveh

+ (λ + w(SOC)) Pech (Tmot , Eech, vveh).

(8.15)

The term w(SOC) represents the additive penalty function (5.22) (see Fig. 5.3),
active when state constraints are hit. In practice, it prevents the battery to be dis-
charged when SOC is too low, by increasing the cost of positive Pech, and it facilitates
the battery to be discharged when SOC is too high by decreasing the cost of Pech.

At each instant of time, the optimal solution T ∗
mot

(t) is the one that minimizes the
Hamiltonian function. One approach to minimization is to evaluate the function H
for the complete set of admissible control values Tmot,vec = {Tmot,min, . . . , Tmot,max }
at each time t, and then pick the one generating the lowest value of H . This optimal
control value T ∗
(t) is applied to the system, which evolves generating the new
mot
values of state and external inputs. The co-state evolution is computed according to
(5.30):

˙λ(Tmot , Eech, vveh) = −

∂ H
∂ Eech

= −λ

∂

˙S OC (Pbatt , SOC)
∂SOC

(8.16)

˙S OC
where the function ∂
∂SOC is computed numerically evaluating it from Eq. (8.7) and
using the data in Fig. 8.4; its values as a function of Pbatt and SOC are shown in
Fig. 8.5.

2The maximum and minimum limitations on the power from/in the battery depend on battery state
of charge (as well as temperature, although its effect is neglected in the models used here).

8.2 Parallel Architecture

95

5

0

0

0 . 0

0.0001

0

−0.0001

0.0005

0.0001

−0.0001

1

0

0 . 0

5

0

0

0 . 0

0

0

0.0001
−0.0001

0

−0.0005

]

W
k
[
 
r
e
w
o
P

40

30

20

10

−10

−20

−30

−40

0.2

0.4

0.6

0.8

1

SOC

Fig. 8.5 The contour lines represent the values of the function
and the contour lines are computed using the characteristics of Fig. 8.4

∂

˙S OC(Pbatt ,SOC)
∂SOC

in [s−1]. The map

Fig. 8.6 Top-level view of vehicle simulator

8.2.3 Model Implementation

Figure 8.6 shows the implementation of the vehicle-level simulator which follows
the structure deﬁned in Fig. 2.4. The simulator is composed of the following main
blocks:
• Driving cycle generates the sequence of setpoints for speed, acceleration, and slope

that the vehicle should follow;

• Driver (Fig. 8.7) computes the torque setpoint necessary to follow the prescribed
cycle; the setpoint is computed using (2.6), with an additional feedback term
proportional to the speed tracking error (which may be different from zero when
the cycle cannot be followed exactly due to powertrain actuator saturation);

• Energy Management generates the individual setpoints for the powertrain actuators
(in this example relative to a parallel hybrid architecture, these are the engine and
the electric motor). The inputs to the block are the total torque setpoint and the
measurements from the vehicle, namely battery SOC and vehicle speed.

96

8 Case Studies

Fig. 8.7 Driver block of Fig. 8.6

Fig. 8.8 Vehicle and Powertrain model block of Fig. 8.6

• Vehicle and Powertrain model (Fig. 8.8) contains the plant model, which takes
the actuator setpoints as inputs and computes the evolution of vehicle speed and
battery SOC, as well as the engine fuel consumption. The block includes the
main powertrain components arranged according to a typical forward simulation
approach, where vehicle speed is computed by integration of force according to
(2.1) and Fig. 2.2. The speed is then fed back to all powertrain components. The
engine and motor blocks saturate the torque demand according to torque and power
limitations, and compute the consumption of fuel or electric power corresponding
to the operating point, using static maps.

Figure 8.9 shows the implementation of the energy management using PMP; the

function of each of the blocks composing the strategy can be detailed as follows:

• Gear shifting strategy implements a simple gear shifting strategy based on speed
and torque thresholds: the highest gear compatible with the vehicle speed and with
the driver’s torque request is selected. This means that for a given vehicle speed,

8.2 Parallel Architecture

97

Fig. 8.9 Energy Management Strategy block of Fig. 8.6

the strategy selects the highest gear that allows the total torque output to match
the driver’s torque request, while keeping the engine speed in the allowable range
(between idle and red-line).
The gear index, itr , is therefore computed using a rule-based algorithm that is
outside of the optimal control strategy, for which the gear index is simply an
external input. Note that the gear shifting strategy also takes SOC as an input,
because the maximum torque of the motor depends on the battery state of charge
as described by Eq. (8.13). Hence, the maximum output torque in a given gear is
affected by SOC level.

• Control domain generates the set of control values for which the Hamiltonian
is evaluated. This set is named here Trq_mot_u and is composed of Nu points,
which include: Tmot = 0 (engine-only mode), Tmot = Tgb (electric-only mode, or
zero engine contribution), and then Nu − 2 values of torque distributed uniformly
between the absolute minimum and maximum torque of the motor, to cover its
entire torque range. In general, the sufﬁx _u in the variable name denotes vectorial
variables generated by this set of control candidates, i.e., arrays of size Nu. In the
numerical examples that follow, Nu = 22.

• Powertrain inverse model implements the equations of the vehicle model described
in Sect. 8.2.1, and outputs all the variables needed to compute the Hamiltonian
function. These variables are arrays of size Nu, as they depend on the control
input. Note that not all control candidates generate feasible solutions, since some
of them may not meet all the instantaneous constraints (e.g., some motor torque
values may exceed battery power limitations, others may correspond to infeasi-
ble engine torque values, etc.). In order to exclude the infeasible solutions, the
variable Infeasible_ﬂag_u is created, which contains a ﬂag identifying infeasible
solutions, i.e., solutions that do not meet the control constraints.3 These infeasible
solutions have a very large cost associated to them, in order to be excluded from
the ensuing minimization.

• Hamiltonian computation and minimization computes the Hamiltonian function
for all elements in the control arrays, and then identiﬁes the index of the array

3Infeasible_ﬂag_u is an array of size Nu composed of zeros and ones: zeros for the solutions that
meet all the constraints, ones for those that do not meet some of them.

98

8 Case Studies

 

Infeasible 
region

fuel

ech

P

P

H

Infeasible 
region     

70

60

50

40

30

20

10

0

W
k

−10

 
−67

0
 [Nm]

T

mot

T

req

67

Fig. 8.10 Example of Hamiltonian computation and minimization. The discretized control variable
is the motor torque Tmot ; the solid line represents the values of engine fuel power Pfuel and the
dashed line shows the values of the battery electrochemical power Pech. The resulting Hamiltonian
H computed for each control candidate value is indicated by the dots. The gray areas represent
values of the control corresponding to infeasible solutions. In this example, the minimum value of
Hamiltonian corresponds to Tmot = Tr eq , i.e., to electric-only propulsion

corresponding to the minimum value. The index is used to select, from the arrays
of engine, motor, and brake torque, the optimal values that are then actuated in the
plant. A numerical example of the values taken at a given time by the Hamiltonian
function and its constituents is shown in Fig. 8.10, where the full control range is
represented.

8.2.4 Simulation Results

The optimal solution is obtained by applying PMP and using the shooting method to
ﬁnd the optimal initial value of the co-state variable. The results of the iterative search
procedure, performed for a Worldwide harmonized Light vehicle Test Procedure
(WLTP) driving cycle [4], are shown in Figs. 8.11 and 8.12: starting from an initial
guess for λ0, the problem is solved and the ﬁnal state of charge value, SOC(t f ) is
compared to the target, SOCtarget. Depending on the difference SOC(t f ) − SOCtarget
the value of λ0 is increased or decreased in the next iteration, and the driving cycle
is simulated again with a new initial value λ0. At the generic nth iteration, the value
of λ0 is set to

λ0(n) = 1
2

(cid:2)
λinf (n − 1) + λsup(n − 1)

(cid:3)

(8.17)

where λinf and λsup are two variables introduced to implement a bisection method
[5]. After being initialized at arbitrary values, λinf and λsup are updated at each step

8.2 Parallel Architecture

Fig. 8.11 Shooting method:
convergence toward the
optimal initial co-state value

Fig. 8.12 Shooting method:
iterations shown in the plane
(λ0, (SOC(t f ))

99

 

1

2

3

4

5

target

1

2

4

5

3
Iteration #

0

λ

f

)
 

t
(

C
O
S

f

)
 

t
(

C
O
S

3.5

4

3

2.5

0.8

0.7

0.6

0.5

0.4

 

0.8

0.75

0.7

0.65

0.6

0.55

0.5

0.45

0.4

2.5

3

3.5

4

λ
0

of the iteration according to the following rules:

if SOC(t f ) − SOCtarget < 0 :

if SOC(t f ) − SOCtarget > 0 :

(cid:12)

λinf (n) = λ0(n − 1)
λsup(n) = λsup(n − 1)
(cid:12)

λinf (n) = λinf (n − 1)
λsup(n) = λ0(n − 1)

(8.18)

(8.19)

In the example shown, the initial values at n = 0 are λinf = 0.5 and λsup = 5; the
search terminates when |SOC(t f ) − SOCtarget| < 0.01. The convergence of the bi-
section method is reached in 5 iterations, as shown in Figs. 8.11 and 8.12.

The bisection method is applied to two PMP formulations: (1) dynamic co-state
expressed according to (8.16), and (2) constant co-state where λ is kept at the value

100

8 Case Studies

]
h
/
m
k
[
 
d
e
e
p
S

 
.
h
e
V

]

m
N

[
 
e
u
q
r
o
T
 
e
n
i
g
n
E

]

m
N

[
 
e
u
q
r
o
T
 
r
o
t
o
M

C
O
S

150

100

50

0

150

100

50

0

−50

150

100

50

0

−50

0.8

0.7

0.6

0.5

0.4

4

λ

3.5

3

 
0

 

Dynamic co−state

Constant co−state

200

400

600

800

1000

1200

1400

1600

1800

Time [s]

Fig. 8.13 Optimal solutions for cycle WLTP, obtained solving PMP with: (1) dynamic co-state
and (2) constant co-state. The reduction of fuel consumption with respect to the corresponding
conventional vehicle (identical, but without electric motor) is 21.5 % for both cases. Note how the
optimal control policy makes the motor torque negative in the last part of the cycle, thus using the
engine to recharge the battery up to the target ﬁnal SOC

8.2 Parallel Architecture

101

]
h
/
m
k
[
 
d
e
e
p
S

 
.
h
e
V

C
O
S

150

100

50

0

0.8

0.7

0.6

0.5

0.4

λ

5

4

3

2

 
0

 

Optimal PMP

Continuous A−PMP

Discrete A−PMP

200

400

600

800

1000

1200

1400

1600

1800

Time [s]

Fig. 8.14 Optimal solution (with constant co-state) compared to adaptive strategies (7.1) and (7.2).
The continuous A-PMP parameters are kP = 4, kI = 0.2; the discrete A-PMP parameters are kd
=
P
8, T = 60 s. After SOC correction, the fuel consumption increase with respect to the optimal solution
is 2.4 % with continuous A-PMP, and 2.1 % with discrete A-PMP

λ0 for the entire driving cycle. Figure 8.13 shows a comparison of the two cases (each
with the optimal λ0 computed from the iterative search).

Figure 8.14, instead, compares the optimal solution to the results of the two adap-
tive strategies introduced in Sect. 7.3.1, i.e., the continuous and the discrete A-PMP.

8.3 Power-Split Architecture

8.3.1 Powertrain Model

The example of powertrain modeling presented in this section is based on the Toy-
ota Hybrid Synergy Drive (HSD) [3, 6]. Being the ﬁrst successful hybrid electric
technology on the market, this system has been extensively studied in the literature

102

Fig. 8.15 Power split
architecture with planetary
gear train arrangement

8 Case Studies

Engine

Gen

Mot

FD

EVT

Batt

[1, 2, 7–9]. The hybrid architecture consists of an electrically variable transmission
(EVT), composed of a planetary gear set to which the engine and one electric machine
(the generator) are connected, as shown in Fig. 8.15; a second, more powerful elec-
tric motor is connected to the EVT output (the ring gear). The battery pack provides
electrical power to the two electric machines.

The engine is connected to the carrier shaft of the planetary gear set4 as shown
in Fig. 8.15; the generator is connected to the sun, while the ring is connected to the
output shaft. The motor is also connected to the output shaft, thus the motor and
the ring drive the powertrain output together. A quasi-static modeling approach is
used for energy analysis, neglecting the inertia and the dynamics of engine, electric
machines, and all gears and shafts.
The torque at the wheels is

where Tmot is the motor torque, Tr is the planetary ring torque, and gfd is the ﬁnal
drive ratio. Tr is related to the generator and motor torque by the general planetary
gear set equation (2.23):

Tpwt = gfd · (Tr + Tmot )

Teng = Tc = (1 + ρ)Tr

Tgen = Ts = ρ · Tr

(8.20)

(8.21)

(8.22)

where ρ = Ns/Nr is the planetary gear ratio (Nr = 78 and Ns = 30 [2]).

Given (8.21) and (8.22), one of Tr , Teng, and Tgen is sufﬁcient to determine the

other two.

4see also Fig. 2.11.

8.3 Power-Split Architecture

The kinematic constraint (2.21) can be written in this case as

(1 + ρ)ωeng = ρωgen + ωmot .

The motor speed (which is equal to the ring speed) is proportional to the wheel
speed, since there is a ﬁxed gear (the differential) between the ring/motor shaft and
the wheels; therefore, it is also proportional to the vehicle longitudinal speed:

where vveh is the vehicle speed and Rwh the wheel radius. Using (8.23), the engine
speed ωeng can be related to the generator speed ωgen and the vehicle speed as follows:

ωmot = ωr = gfd

vveh
Rwh

ωeng =

ρ
1 + ρ

ωgen + gfd
1 + ρ

vveh
Rwh

.

Equation (8.25) shows an interesting characteristic of this powertrain: the engine
speed can be made to assume any value (within the admissible range) independently
from the vehicle speed, by varying the speed of the generator. This is the reason
why this kind of arrangement is also deﬁned as electrically continuously variable
transmission (E-CVT), pointing out the similarity with the CVT technology used in
conventional vehicles. In fact, both realize a transmission with no ﬁxed ratios, but
rather a continuously varying ratio between the engine speed and the vehicle speed,
as shown by the graphical representation of (8.25) in Fig. 8.16.

By varying the generator speed, it is therefore possible to keep the engine in the

maximum efﬁciency range for each torque level.

The battery is the same as that described in Table 8.2; the engine, motor, and

generator maps are shown in Figs. 8.17, 8.18, and 8.19 respectively.

103

(8.23)

(8.24)

(8.25)

ω

=

gen

10000 rpm

8000 rpm
6000 rpm
4000 rpm
2000 rpm
0 rpm
−2000 rpm
−4000 rpm
−6000 rpm

Fig. 8.16 EVT ratio: Engine
speed versus vehicle speed,
for several values of
generator speed (admissible
engine range in bold)

7000

6000

5000

4000

3000

2000

1000

]

m
p
r
[
 
d
e
e
p
s
 
e
n
i
g
n
E

0

0

50

100
Vehicle speed [km/h]

150

200

104

8 Case Studies

Fuel consumption [g/s]

Efficiency

6
0.3

0

.

3

7

6

0 . 3

0.33

0.3

0.25
0.2

0.1

0 . 3 3

0 . 3

0.25
0 . 2

0.1

4000

0
1000

2000

3000
Speed [rpm]

4000

1000

2000

3000
Speed [rpm]

120

100

80

40

20

]

m
N

[
 
e
u
q
r
o
T

1

2

3

1

.

5

2

.

5

60

0

.

5

1

1

.

5

2

0

.

5

1

Fig. 8.17 Engine maps [1]

Fig. 8.18 Motor map
(elaboration of data from [3])

400

300

200

100

0

−100

−200

−300

−400

150

100

50

0

−50

−100

−150

]

m
N

[
 
e
u
q
r
o
T

]

m
N

[
 
e
u
q
r
o
T

0

5

0 . 8

0.75

0.85

0.92

0 . 9 5

0.95

0.92
0.85
0.95

5

0 . 9
0 . 9 2

0.92

0.85

0.92

0.85

0 . 9
0.85
0.9 2

0 . 8 5

0

.

7
5

0

.

8

5

0

.

9

2

0 . 7 5

0 . 8 5

0.85

0.92

0

.

7
5

0

.

8

5

0
.
9

2

0.85

0.75

0

1000

2000

5000

6000

4000

3000
Speed [rpm]

0.85

0.92

0 . 9 5

0.95

0.92
0.85

0.95

5

0 . 9
0 . 9 2

0

.

7

5

0

.

8

5

0

.

9

2

5

0 . 7

0 . 8 5

0.85

0.92

0
.
9

2

0

.

8

5

0

.

7

5

0

2000

0.85

4000
Speed [rpm]

6000

0.92

0.85

0.92

0.85

0 . 9
0.85

0.9 2

0 . 8 5

8000

2

2

Fig. 8.19 Generator map
(elaboration of data from [3])

0.75

5

0 . 8

8.3 Power-Split Architecture

105

8.3.2 Optimal Control Problem Solution

The energy management problem formulation and the deﬁnition of the constraints
follow the same pattern as in the previous case study (Sect. 8.2.2). The differences
between the parallel and powersplit architecture are in kinematic equations and the
different control variables, as described in the following.

The required torque at the wheels Tpwt is obtained from (8.20), while the ring
torque Tr is computed from (8.21) as a function of the engine torque Teng. The gen-
erator torque is determined by (8.22). Thus, the motor and engine torques determine
the amount of torque transmitted at the wheels, while the generator speed is set in
order to let the engine operate at high efﬁciency. The energy management problem
has two degrees of freedom (once the output torque Tpwt is imposed): the engine
torque Teng and the generator speed ωgen. Together, they deﬁne the battery power,
casting once again the problem in the general framework deﬁned in Sect. 3.4.

The generator mechanical power can be related to the engine torque and speed

using (8.21) and (8.22):

Pgen,m = ωgen Tgen = ωgen

ρ
1 + ρ

Teng,

while the motor power is

Pmot,m = ωmot Tmot .

The total electric power at the battery is

Pbatt = Pmot,e + Pgen,e

where the electric power of motor and generator is related to their mechanical power
by the efﬁciency of each machine:
(cid:12)

Pgen,e =

(cid:12)

Pmot,e =

ηgen Pgen,m if Pgen,m < 0
if Pgen,m ≥ 0
1
ηgen

Pgen,m

ηmot Pmot,m if Pmot,m < 0
if Pmot,m ≥ 0.
1
ηmot

Pmot,m

(8.26)

(8.27)

(8.28)

(8.29)

(8.30)

8.3.3 Model Implementation

The simulator implementation is the same as the previous case study, but in this
case the Energy Management Strategy has the structure of Fig. 8.20: the control
array is composed of permutations of the two control variables, Teng and ωgen, thus

106

8 Case Studies

Fig. 8.20 Energy Management Strategy block for EVT case study

Feasible solutions
Infeasible solutions

]

W
k
[
 

H

120

100

80

60

40

20

0
−1000

−53

 

 ω

gen

 [Nm]

1000

111

55

T

eng

 [Nm]

0

Fig. 8.21 Hamiltonian function computed over the discretised control space, Teng and ωgen, at a
given time instant

increasing the overall number of candidates to be evaluated (for instance, if each of
the two variables can take one of 20 values, the total number of candidates is 400).
The Hamiltonian function at each instant is therefore a 2-D surface, computed for
all combinations of the two control variables shown in Fig. 8.21.

8.3.4 Simulation Results

The optimal solution obtained with PMP after optimization of the co-state is shown
in Fig. 8.22, for an urban driving cycle. The corresponding engine operating points
resulting from the optimization are reported in Fig. 8.23, showing how the control

8.3 Power-Split Architecture

107

]
h
/
m
k
[
 
d
e
e
p
S

 
.
h
e
V

60

40

20

0

]

m
N

[
 
e
u
q
r
o
T
 
r
o
t
o
M

200

0

−200

]

m
N

[
 
e
u
q
r
o
T
 
e
n
i
g
n
E

100

50

0

]

m
p
r
[
 
d
e
e
p
S
 
r
o
t
a
r
e
n
e
G

6000

4000

2000

0

−2000

0.8

0.7

0.6

C
O
S

0.5

0  

100

200

300

400

500

600

700

800

900

Time [s]

Fig. 8.22 Optimal solutions obtained solving PMP with constant co-state (Cycle Artemis Urban).
The optimal co-state value is found to be λ = 2.504

108

8 Case Studies

]

m
N

[
 
e
u
q
r
o
T

120

100

80

60

40

20

0

0

.

3
7

0.36

0.36

0.33

0.25

0.1

0.33

0.25

0.1

0.36

0 .33

0.25

0.1

1000

1500

2000

3500

4000

4500

3000
2500
Speed [rpm]

Fig. 8.23 Engine operating points corresponding to the solution of Fig. 8.22; the gray line indicates
the optimal operation line (maximum engine efﬁciency)

]
h
/
m
k
[
 
d
e
e
p
S

 
.
h
e
V

C
O
S

60

40

20

0

0.8

0.7

0.6

0.5

λ

4

3

2

1

 
0

Optimal PMP

Continuous A−PMP

Discrete A−PMP

 

100

200

300

400

500

600

700

800

900

Time [s]

Fig. 8.24 Optimal solution of Fig. 8.22 compared to adaptive strategies (7.1) and (7.2). The continu-
ous A-PMP parameters are kP = 4, kI = 0.2; the discrete A-PMP parameters are kd
= 8, T = 60 s.
P
After SOC correction, the fuel consumption increase with respect to the optimal solution is 1.6 %
with continuous A-PMP, and 7.8 % with discrete A-PMP

8.3 Power-Split Architecture

109

leads to the selection of engine points around the optimal operation line. Finally, the
same optimal solution is compared to the adaptive strategies in Fig. 8.24. Unlike the
example proposed in Fig. 8.14, in this case the discrete A-PMP is sensibly worse
than the optimal solution and the continuous A-PMP: the reason is that the SOC
reaches the upper bound in several instances, which prevents the recuperation of all
available regenerative braking energy, therefore reducing the overall performance.
In addition, the optimal solution makes use of the EVT ability to recirculate power
between motor and generator, but uses a limited amount of battery power, as seen
by the small variation of SOC in Fig. 8.22; on the other hand, the adaptive strategies,
without a priori knowledge of the optimal co-state value, show greater SOC variations
due to more usage of the battery, resulting in a small penalty in fuel consumption
due to the extra charge–discharge losses.